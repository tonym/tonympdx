<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:base="https://www.tonympdx.com/blog">
  <title>Tony M - Blog</title>
  <subtitle>I write about literature and art, cocktails and culture, and design and development</subtitle>
  <link href="https://www.tonympdx.com/blog/feed.xml" rel="self"/>
  <link href="https://www.tonympdx.com/blog"/>
  <updated>2022-09-04T01:03:43.333Z</updated>
  <id>https://www.tonympdx.com/blog</id>
  <author>
    <name>Tony M</name>
    <email>tony@fbpllc.com</email>
  </author>
  <entry>
    <title>Neurodiversity in the workplace</title>
    <summary>People with mental conditions and illnesses are being accepted in the modern workplace. But are they? Really? And what does it mean for the future? Read some personal reflections on working in tech as a person with mental illness.</summary>
    <link href="https://www.tonympdx.com/blog/post/neurodiversity-in-the-workplace"/>
    <updated>2022-09-04T01:03:43.333Z</updated>
    <id>https://www.tonympdx.com/blog/post/neurodiversity-in-the-workplace</id>
    <content xml:lang="en" type="html">&lt;p&gt;We live in a remarkable time when diversity and inclusion are taken seriously in the workplace. Companies are coming to grips with the inefficiency of filtering resumes based on keywords. They&#39;ve begun realizing that the automated rejection email and impersonal tone are doing more to drive people away from opportunity rather than towards it. They&#39;ve gone from &amp;quot;be professional at work&amp;quot; to &amp;quot;be your authentic self&amp;quot; as a path to a more diverse workforce. They&#39;ve begun dealing with inequity by addressing the entitlement of some and elevating the entitlement of others in search of a fair baseline for entry and reward. Safe spaces are mandatory and defended in response to the hostility and toxicity that infested the tech industry for too long. The underrepresented are included, heard, and valued for who they are and what they offer in what should be a renaissance of humanity among artisans. However, we are still at the beginning of the journey, and change takes time. For a great many, there is still no acceptance or safe space at too many companies, and few employers will acknowledge that people with mental illness remain on the outside looking in.&lt;/p&gt;
&lt;p&gt;In the mid-2010s, I created a series of conceptual photographs called &amp;quot;Bread and Roses.&amp;quot; The series&#39; theme is acknowledgment. I attempt to show not just how the world looks through the eyes of someone with a mental illness but how it feels. Of my creative work, it&#39;s among the few collections I still keep in my portfolio. It&#39;s not commercial, and there are no product or advertising pictures. It&#39;s not published, and I rarely show it. It has no business in my portfolio and likely turns some potential clients or employers away, but I keep it there for those who need to see it and know they, too, are seen.&lt;/p&gt;
&lt;p&gt;I have borderline personality disorder (BPD). BPD is characterized by an intense fear of abandonment, an unstable self-image, impulsive behavior, self-harm, highly variable mood swings, and emotional dysregulation. I&#39;m a real piece of work, yet I&#39;m a successful artist and developer, not in spite of my illness but because of it. I&#39;m reminded of that every time someone looks at my work and lets it speak to them.&lt;/p&gt;
&lt;p&gt;In 2019 a young designer contacted me and explained their experience with BPD. They knew what it was, what it felt like, what it meant to have a family member with BPD, and what it meant to see the work and not feel alone. I don&#39;t label &amp;quot;Bread and Roses&amp;quot; as a depiction of BPD; it&#39;s just one of those things that if you know, you know, and if you don&#39;t, they&#39;re still nice pictures to look at. That&#39;s what art should do. Tell you something about the artist, tell you something about you, the viewer, or tell you something about both artist and viewer.&lt;/p&gt;
&lt;p&gt;We&#39;ve made great strides toward inclusion in the modern workplace, encouraging people to share their unique and authentic experiences. We carve out spaces for mutual support, and I love that I can be out as queer among other queer coworkers who accept that pansexuality is indeed a point of pride, especially for a man old enough to remember a time when it kinda wasn&#39;t. I love that women in tech can now be women in tech and have room to support each other. I love seeing black people among my peers. I love that all these employee resource groups can support their members on common ground and share who they are with the general company population. Neurodiversity, though, is another matter.&lt;/p&gt;
&lt;p&gt;I&#39;ve never had a problem being out at work or not, and it never seemed important to me. I know that is my experience and not the experience of a great many who cannot say that. My problem is having to work while sick. I&#39;m sick all the time. A mental illness is not a cold. It&#39;s always there, it never goes away or takes a break, and the best we can do is deal with it. In my case, dialectical behavior therapy (DBT). You see, in the old days, like, the nineties, BPD was considered untreatable. Most doctors refused to accept BPD patients, and those who did loaded us up on lithium and Prozac, which made us zombies. DBT changed that. BPD is now treatable, and we have the tools to recover from it. It takes formidable practice, daily work, and endless effort, but it does work. Except when it doesn&#39;t.&lt;/p&gt;
&lt;p&gt;In those moments, when I try and fail, the &amp;quot;Bread and Roses&amp;quot; pictures become pictures for me, too. To see, on the wall, what it feels like to look into a mirror and not recognize the person there. How it feels to want to connect with someone but can&#39;t because of an overwhelming fear of rejection or to work so hard for someone who sees only personal gain and not the person behind it. A gift with consequences. The feeling of being invisible. You don&#39;t see me.&lt;/p&gt;
&lt;p&gt;The migraines that never end, like your head is wrapped in wire, or the fog of dissociation when overwhelmed by sensory input and emotional confusion that... You have to stop.&lt;/p&gt;
&lt;p&gt;In 2018, a young person with BPD saw my pictures for the first time and smiled. &amp;quot;I know how that feels,&amp;quot; they said. I smiled, too, because it&#39;s not all doom and gloom. Emotional dysregulation means we feel all the emotions, all the time, at full volume. Yes, it means we feel depression, but also great joy. We appreciate love and beauty just as intensely, and what those of us with BPD know that those without don&#39;t is that your full volume, your 10, is our 3 or 4. We drink from an emotional firehose, which makes the world a glorious place. Glorious, that is, when we are safe enough to revel in it.&lt;/p&gt;
&lt;p&gt;Neurodiversity in the workplace is making strides, and we&#39;re seeing improvement in accommodation and support for a growing number of conditions. I never thought I would see anything like this in my career, yet there&#39;s still a hand on the door, and it&#39;s still only open so far. For those of us with the scary diseases, even the most accommodating workplace is still a dangerous and lonely place of microaggressions and stigma. How many times have I heard, &amp;quot;what&#39;s wrong with you?&amp;quot; or &amp;quot;why can&#39;t you do this, that, or the other thing?&amp;quot; or, the most awful and most common, &amp;quot;you have your quirks, but you&#39;re OK.&amp;quot; No, accommodation for neurodiversity is more often about mental health, not mental illness.&lt;/p&gt;
&lt;p&gt;Think about mental health as one would consider physical health. You eat right, go to the gym and work out, avoid tobacco, limit the alcohol, and walk to work instead of driving or taking the bus. If you live with a physical disability, however, the formula changes. Health needs become more specific, and accommodation becomes more important. With mental health, you meditate, practice mindfulness, keep the mind sharp through study or some mental exercise, see a therapist when you need to, and make it a practice as part of an overall health maintenance plan. For those with mental disabilities, the same changes happen to the formula. We have more specific needs and require more active accommodation.&lt;/p&gt;
&lt;p&gt;All of our needs are different, of course, and even when our needs are met, we&#39;ll have bad days. Everyone has bad days. People with mental illness experience bad days under a much more critical eye with much less leeway or understanding. Stigma. Instead, let&#39;s learn what makes a good day and work toward that. For me, I need a positive environment, strong and committed management support and a clearly defined lane in which I know exactly what&#39;s asked of me and what goal we are working towards.&lt;/p&gt;
&lt;p&gt;In some companies, accommodation means adjusting the process or workflow based on an individual. More often than not, it is the manager or supervisor who takes an interest and is willing to do the work. These are the people I like, people who don&#39;t dismiss emotional limitations as shortcomings; rather, they see them as boundaries. I&#39;ve worked with many excellent managers and colleagues, all of whom care about people first, acknowledge that we have unique qualities and flaws, and ensure the safety of those around them with listening and support. I&#39;ve also worked with a fair share of bullies and scoundrels.&lt;/p&gt;
&lt;p&gt;At the organizational level, we have to do better. Mental illness knows no boundary of race, gender, orientation, class, or age. It afflicts a percentage of all of us. It&#39;s not enough to declare inclusivity unless you are ready to do the work to make a place that is inclusive of everyone, and it&#39;s hard to do. As an employee, it took me years to learn how to set boundaries and defend them, how to walk away from dangerous places, and how to deal with an uncertain future instead of risking the regrettable outcome of a bad situation. As an employer, it was, to my cost and shame, even harder to learn. As someone with a neurodiverse condition, one would think I would have an advantage, but that&#39;s not true. I don&#39;t know any more than anyone else, and if knowing what actions to take is hard for me, how would it be for someone who doesn&#39;t walk a different path?&lt;/p&gt;
&lt;p&gt;We all have to work together. It&#39;s time to start having difficult conversations about mental illness, and it&#39;s time for executives and managers to listen. We&#39;re here, we&#39;re in the workforce, and we are quite often very good at what we do when given the right conditions under which to do it. For workers, express yourself. Create your pictures, tell your stories, and be proud. You might not want to be open about yourself, and that&#39;s OK. Some of us are, and we can be for you too, which is why I keep creative work in my technical portfolio. If my creations bother or offend you, I don&#39;t care. They are not there for you. On the other hand, if they do speak to you, I&#39;ll be glad because it&#39;s what we need to start creating positive change in workplaces and companies where we&#39;re still invisible.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Building a design system  2 - setup continued</title>
    <summary>This exercise continues the setup of our design system, adds the first provider, the first helper, and some new Typescript types.</summary>
    <link href="https://www.tonympdx.com/blog/post/building-a-design-system-2-setup-continued"/>
    <updated>2022-08-29T20:41:45.723Z</updated>
    <id>https://www.tonympdx.com/blog/post/building-a-design-system-2-setup-continued</id>
    <content xml:lang="en" type="html">&lt;p&gt;In the &lt;a href=&quot;https://www.tonympdx.com/blog/post/building-a-design-system-1-setup/&quot;&gt;first part of the series&lt;/a&gt;, we set up a repository, configured our tooling, and started coding. In this exercise, there are a few more details to cover before we get to creating theme features in the theming engine.&lt;/p&gt;
&lt;p&gt;The code for this post is available at:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/tonym/whirlwind/tree/lesson-2&quot;&gt;https://github.com/tonym/whirlwind/tree/lesson-2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Goals&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Begin adding helpers&lt;/li&gt;
&lt;li&gt;Add types for styles&lt;/li&gt;
&lt;li&gt;Add a stylesheet provider&lt;/li&gt;
&lt;li&gt;Write tests for new additions&lt;/li&gt;
&lt;li&gt;Add Rollup and configure bundling&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Difficulty level&lt;/h2&gt;
&lt;p&gt;Advanced. This is an advanced tutorial and assumes that you are a moderately experienced frontend developer. Beginning developers may find this challenging.&lt;/p&gt;
&lt;h2&gt;Overview&lt;/h2&gt;
&lt;p&gt;In the first part of this series, we set up a repository and started adding code. We installed the first few dependencies, created some Typescript types, configured a test framework and a Redux store, then added a stylesheet creator. All of the initial housekeeping and tooling are done, although it&#39;s not yet useful.&lt;/p&gt;
&lt;p&gt;Our goal in this exercise is to add a stylesheet provider, a function that will attach a stylesheet to a host application&#39;s markup and package it so we can try it out. Before beginning, let&#39;s examine a little more about how the system works.&lt;/p&gt;
&lt;p&gt;We&#39;re working towards the goal of accepting a JSS object, transpiling it to CSS, and attaching it to some HTML.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.sanity.io/images/5pnyimif/production/2bed962bae18793f57a84dcdd74385189b33eee4-800x400.png?w=600&quot; alt=&quot;undefined&quot;&gt;&lt;/p&gt;
&lt;p&gt;The diagram shows how JSS comes from the host application, and CSS is returned to it. This is our immediate goal, and after we accomplish that, we can think about the themes that will provide values to the JSS, and then have the JSS come from components in our component library. With each exercise, we&#39;ll add more to our block diagram until we have all the features.&lt;/p&gt;
&lt;p&gt;We already have the stylesheet creator from exercise 1, so let&#39;s proceed to add the stylesheet provider and package what we&#39;ve built.&lt;/p&gt;
&lt;h2&gt;Dependencies&lt;/h2&gt;
&lt;p&gt;It should surprise nobody that we have more dependencies awaiting us. Let&#39;s start there.&lt;/p&gt;
&lt;h3&gt;Rollup&lt;/h3&gt;
&lt;p&gt;Rollup is our packaging tool. We need it and then some adjacent packages.&lt;/p&gt;
&lt;p&gt;Install using NPM or Yarn:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;npm install --save-dev rollup rollup-plugin-generate-package-json rollup-plugin-terser
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;or&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;yarn add --dev rollup rollup-plugin-generate-package-json rollup-plugin-terser
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now add a few more plugins.&lt;/p&gt;
&lt;p&gt;Install using NPM or Yarn:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;npm install --save-dev @rollup/plugin-commonjs @rollup/plugin-node-resolve @rollup/plugin-typescript
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;or&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;yarn add --dev @rollup/plugin-commonjs @rollup/plugin-node-resolve @rollup/plugin-typescript
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;rimraf&lt;/h3&gt;
&lt;p&gt;The rimraf package is a tool that provides the equivalent of &lt;code&gt;rm -rf&lt;/code&gt; for Node. We use this in our NPM build script to clean up where needed.&lt;/p&gt;
&lt;p&gt;Install using NPM or Yarn:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;npm install --save-dev rimraf
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;or&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;yarn add --dev rimraf
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;tslib&lt;/h3&gt;
&lt;p&gt;Rollup relies on tslib to compile Typescript.&lt;/p&gt;
&lt;p&gt;Install using NPM or Yarn:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;npm install --save-dev tslib
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;or&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;yarn add --dev tslib
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Configure Rollup&lt;/h2&gt;
&lt;p&gt;Add &lt;strong&gt;rollup.config.js&lt;/strong&gt; to the project root, and configure it for ES modules and CommonJS modules.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-typescript&quot;&gt;// file: /rollup.config.js

import commonjs from &#39;@rollup/plugin-commonjs&#39;;
import generatePackageJson from &#39;rollup-plugin-generate-package-json&#39;;
import { nodeResolve } from &#39;@rollup/plugin-node-resolve&#39;;
import { terser } from &#39;rollup-plugin-terser&#39;;
import typescript from &#39;@rollup/plugin-typescript&#39;;

const baseContents = pkg =&amp;gt; ({
  author: pkg.author,
  bugs: pkg.bugs,
  dependencies: {},
  description: pkg.description,
  homepage: pkg.homepage,
  license: pkg.license,
  main: &#39;./node/whirlwind.js&#39;,
  name: pkg.name,
  repository: pkg.repository,
  sideEffects: false,
  version: pkg.version
});

const external = [&#39;jss&#39;, &#39;jss-preset-default&#39;, &#39;redux&#39;];

const input = &#39;src/public-api.ts&#39;;

export default [
  {
    external,
    input,
    output: {
      dir: &#39;dist&#39;,
      format: &#39;es&#39;
    },
    plugins: [typescript(), nodeResolve(), commonjs(), generatePackageJson({ baseContents })]
  },
  {
    external,
    input,
    output: {
      file: &#39;dist/node/whirlwind.js&#39;,
      format: &#39;cjs&#39;,
      name: &#39;whirlwind&#39;,
      plugins: [
        terser({
          compress: {
            drop_console: true
          },
          output: { quote_style: 1 }
        })
      ]
    },
    plugins: [typescript(), nodeResolve(), commonjs()]
  }
];

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is a configuration only for this exercise. When it comes to Rollup, feel free to adjust to your needs, and include the modules that you need.&lt;/p&gt;
&lt;p&gt;If we plan on distributing an NPM package, we need a &lt;strong&gt;package.json&lt;/strong&gt; file in the distributed package. The &lt;strong&gt;baseContents&lt;/strong&gt; function tells the &lt;strong&gt;generatePackageJson&lt;/strong&gt; plugin what should be in the &lt;strong&gt;package.json&lt;/strong&gt; file that gets distributed in our package. It&#39;s a function by convention and named according to the plugin. The plugin requires an argument that looks like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-typescript&quot;&gt;{ baseContents: (pkg) =&amp;gt; { ... } }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The function allows the plugin to use values from our project &lt;strong&gt;package.json&lt;/strong&gt;. In addition, there is a &lt;strong&gt;main&lt;/strong&gt; property, which is the entry point for CommonJS modules.&lt;/p&gt;
&lt;p&gt;The default export has two configuration objects, one for ES modules and the other for CommonJS modules.&lt;/p&gt;
&lt;h2&gt;Add types&lt;/h2&gt;
&lt;p&gt;The last time we created types, we created them for the store and stylesheet. This time we need types for styles. Add this to your &lt;strong&gt;types.ts&lt;/strong&gt; file:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-typescript&quot;&gt;// snippet from file: /src/types/types.ts

import * as CSS from &#39;csstype&#39;;

type JSSNormalCssProperties = CSS.Properties&amp;lt;number | string&amp;gt;;
type JSSFontface = CSS.AtRule.FontFace &amp;amp; { fallbacks?: CSS.AtRule.FontFace[] };

export interface BaseCSSProperties extends JSSNormalCssProperties {
  &#39;@font-face&#39;?: JSSFontface | JSSFontface[];
}

export interface CSSProperties extends BaseCSSProperties {
  [key: string]: unknown | CSSProperties;
}

export type Styles = StylesJSS | CSSProperties;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;First are types for CSS properties and &lt;strong&gt;@font-face&lt;/strong&gt;, then a base interface, then the important one, the &lt;strong&gt;CSSProperties&lt;/strong&gt; interface.&lt;/p&gt;
&lt;p&gt;Since we&#39;re working with both JSS and CSS, the Styles type is a union of both.&lt;/p&gt;
&lt;p&gt;With a bit of refactoring, the types file now looks like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-typescript&quot;&gt;// file: /src/types/types.ts

import * as CSS from &#39;csstype&#39;;
import { Styles as StylesJSS, StyleSheet as StyleSheetJSS } from &#39;jss&#39;;

type JSSNormalCssProperties = CSS.Properties&amp;lt;number | string&amp;gt;;
type JSSFontface = CSS.AtRule.FontFace &amp;amp; { fallbacks?: CSS.AtRule.FontFace[] };

export interface BaseCSSProperties extends JSSNormalCssProperties {
  &#39;@font-face&#39;?: JSSFontface | JSSFontface[];
}

export interface CSSProperties extends BaseCSSProperties {
  [key: string]: unknown | CSSProperties;
}

export type Styles = StylesJSS | CSSProperties;

export type StyleSheet = StyleSheetJSS;

export interface Theme {}

export const ADD_SHEET = &#39;ADD_SHEET&#39;;

export type Sheet&amp;lt;K extends keyof any, StyleSheet&amp;gt; = { [P in K]: StyleSheet };

interface AddSheetAction {
  type: typeof ADD_SHEET;
  sheet: Sheet&amp;lt;string, StyleSheet&amp;gt;;
}

export type ActionTypes = AddSheetAction;

export interface State {
  sheets: Sheet&amp;lt;string, StyleSheet&amp;gt;;
  theme: Theme;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Helpers&lt;/h2&gt;
&lt;p&gt;Over the course of this project, we&#39;ll be collecting helper functions. There are string helpers, color helpers, utilities, and nice-to-have things that help us stay DRY.&lt;/p&gt;
&lt;p&gt;The first of these is a string helper that converts camelCase to kebab-case. Since we dynamically create class names, this helper makes sure we use consistent cases in the output by making camelCase words lowercase and inserting a dash.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-typescript&quot;&gt;// file: /src/helpers/fromCamelToDash/fromCamelToDash.ts

export default function fromCamelToDash(value: string): string {
  function converter(g) {
    return &#39;-&#39; + g[0].toLowerCase();
  }
  return value.replace(/([A-Z])/g, converter);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Stylesheet provider&lt;/h2&gt;
&lt;p&gt;The stylesheet provider takes a JSS object as input, passes it to the stylesheet creator, which returns a JSS stylesheet object, then the provider attaches the CSS stylesheet to the markup of the calling application.&lt;/p&gt;
&lt;p&gt;Add this file to the styles folder:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-typescript&quot;&gt;// file: /src/styles/provideStylesheet/provideStylesheet.ts

import { Styles, StyleSheet, StyleSheetFactoryOptions } from &#39;jss&#39;;
import createStylesheet from &#39;../createStylesheet/index&#39;;
import { addSheet, store } from &#39;../../store/index&#39;;
import fromCamelToDash from &#39;../../helpers/fromCamelToDash/index&#39;;

const styleSheetFactoryOptions: StyleSheetFactoryOptions = {
  index: 5,
  meta: &#39;Styles&#39;
};

export default function provideStylesheet(styles: Styles, options: StyleSheetFactoryOptions = {}): StyleSheet {
  options.generateId = options.meta ? (rule, sheet) =&amp;gt; `${options.meta}-${fromCamelToDash(rule.key)}` : undefined;
  options = { ...styleSheetFactoryOptions, ...options };
  const key = options.meta === styleSheetFactoryOptions.meta ? JSON.stringify(styles) : options.meta;
  const sheet = key ? store.getState().sheets[key] : key;
  const stylesheet: StyleSheet = sheet ? sheet : createStylesheet(styles, options).attach();
  if (key) {
    store.dispatch(addSheet({ [key]: stylesheet }));
  }
  return stylesheet;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So what&#39;s going on here? Settle in. We&#39;re going deep on theory.&lt;/p&gt;
&lt;p&gt;If you look at the imports, you&#39;ll notice we import the Styles and StyleSheet types from JSS. Remember we extended these in our types? We can&#39;t use them here because we are passing arguments to a JSS function, not one of ours, so we use the types the called function uses.&lt;/p&gt;
&lt;p&gt;Next, we set up the default stylesheet factory options. The index is the order in which stylesheets are attached to the markup. Stylesheets are attached in ascending order, index 1, then 2, then 3, etc. Our index scheme looks like this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1 - Baseline or reset CSS&lt;/li&gt;
&lt;li&gt;2 - Component library components that do not use other component library components.&lt;/li&gt;
&lt;li&gt;3 - Component library components that are made with other component library components.&lt;/li&gt;
&lt;li&gt;4 - Not used.&lt;/li&gt;
&lt;li&gt;5 - Default.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All of our internal components will override the defaults. Custom stylesheets requested by a host application might not, so we default to the value that puts stylesheets at the end of the cascade. Leaving 4 unused gives the host application developer some flexibility should they choose to order the custom stylesheets in the cascade.&lt;/p&gt;
&lt;p&gt;The function itself takes two arguments, a JSS styles object and, optionally, stylesheet factory options.&lt;/p&gt;
&lt;p&gt;The first thing the function does is create a custom class name prefix, but only if stylesheet factory options have provided a meta property.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-typescript&quot;&gt;options.generateId = options.meta ? (rule, sheet) =&amp;gt; `${options.meta}-${fromCamelToDash(rule.key)}` : undefined;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;One of the stylesheet factory options not exposed in our types is generateId. If we provide a function as the value of generateId, it will use that function to generate a class name instead of the internal function.&lt;/p&gt;
&lt;p&gt;The internal function uses a counter. By default, numbers are appended to rule names incrementally by stylesheet. This is how encapsulation works.&lt;/p&gt;
&lt;p&gt;Consider a JSS object that looks like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
  root: {
    display: &#39;inline-block&#39;,
    paddingTop: 12
  },
  dark: {
    backgroundColor: &#39;#333&#39;,
    color: &#39;#fff&#39;,
    &#39;&amp;amp; .hover:hover&#39;: {
      backgroundColor: &#39;#4f4f4f&#39;
    },
    &#39;&amp;amp; .selected&#39;: {
      backgroundColor: &#39;#4f4f4f&#39;
    }
  },
  fullWidth: {
    display: &#39;block&#39;,
    width: &#39;100%&#39;
  },
  light: {
    backgroundColor: &#39;transparent&#39;,
    color: &#39;#333&#39;
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It will transpile, using the internal ID generator, to CSS that looks like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;.root-0-1-11 {
  display: inline-block;
  padding-top: 12px;
}
.dark-0-1-12 {
  color: #fff;
  background-color: #333;
}
.dark-0-1-12 .hover:hover {
  background-color: #4f4f4f;
}
.dark-0-1-12 .selected {
  background-color: #4f4f4f;
}
.fullWidth-0-1-13 {
  width: 100%;
  display: block;
}
.light-0-1-14 {
  color: #333;
  background-color: transparent;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We use the default generator with the default meta.&lt;/p&gt;
&lt;p&gt;What happens if we have meta in the stylesheet factory options argument? The ternary in the above assignment checks for it, and if it is there, assigns a generateId function.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-typescript&quot;&gt;(rule, sheet) =&amp;gt; `${options.meta}-${fromCamelToDash(rule.key)}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This replaces the internal generator, which, when called, gets two arguments. We don&#39;t have to use them in our function, but the properties must be there.&lt;/p&gt;
&lt;p&gt;See how the fromCamelToDash helper is used to force kebab case? The transpiler will replace spaces with dashes, but we want it all dashes, and since JSS key values are almost surely camelCase, we convert it to kebab.&lt;/p&gt;
&lt;p&gt;Suppose we do provide a meta value in the stylesheet factory options argument.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
  meta: &#39;eh-menu&#39;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Our generator function is used, and the resulting CSS looks like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;.eh-menu-root {
  display: inline-block;
  padding-top: 12px;
}
.eh-menu-dark {
  color: #fff;
  background-color: #333;
}
.eh-menu-dark .hover:hover {
  background-color: #4f4f4f;
}
.eh-menu-dark .selected {
  background-color: #4f4f4f;
}
.eh-menu-full-width {
  width: 100%;
  display: block;
}
.eh-menu-light {
  color: #333;
  background-color: transparent;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;All of our components will have CSS that looks like that because we provide a meta value in the stylesheet factory options.&lt;/p&gt;
&lt;p&gt;This is favorable because all components should use the same class names for styling. This makes them extendable and overrideable via CSS or SCSS in addition to JSS. It also makes sure only one stylesheet is needed for all of the same components in a view. In other words, you might have ten buttons on a page but only one button stylesheet for all of them.&lt;/p&gt;
&lt;p&gt;On the other hand, this is unfavorable for custom stylesheets because we want them encapsulated. Unless they, too, provide a meta value.&lt;/p&gt;
&lt;p&gt;Moving along with our stylesheet provider, we next spread the stylesheet factory argument over the default stylesheet factory options.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-typescript&quot;&gt;options = { ...styleSheetFactoryOptions, ...options };
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Why do this? There should always be a meta value for troubleshooting. It will label the stylesheet in the markup. The default meta will look like this (for brevity, the CSS is omitted):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;style data-jss=&amp;quot;&amp;quot; data-meta=&amp;quot;Styles&amp;quot;&amp;gt;
  ...
&amp;lt;/style&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The custom meta we used earlier will look like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;style data-jss=&amp;quot;&amp;quot; data-meta=&amp;quot;eh-menu&amp;quot;&amp;gt;
  ...
&amp;lt;/style&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Taking a break&lt;/h3&gt;
&lt;p&gt;Let&#39;s take a break for a moment. Before we see how the stylesheet provider uses the store to make sure only one stylesheet of a kind is attached to the HTML, let&#39;s think about those classes we created.&lt;/p&gt;
&lt;p&gt;How do we work with them? In an upcoming exercise, we&#39;ll use them in a component, but how? Do we need to know the class names, and how do we know if they have unpredictable numbers appended to their names?&lt;/p&gt;
&lt;p&gt;The answer is that we don&#39;t work with them directly. We make sure internal components have consistent and predictable names as a courtesy to the developer, who may need to target them via CSS, but with JSS, they aren&#39;t used directly.&lt;/p&gt;
&lt;p&gt;Instead, the JSS stylesheet object has two things in it. The stylesheet that gets attached to the host markup and a &lt;strong&gt;classes&lt;/strong&gt; object. The &lt;strong&gt;classes&lt;/strong&gt; object uses our JSS keys as keys and the generated class names as values.&lt;/p&gt;
&lt;p&gt;If we want to use them, which we will when we build the classes provider in a future exercise, we destructure them from the JSS stylesheet object and have something like this, shown using our eh-menu meta from before.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
  root: &#39;eh-menu-root&#39;,
  dark: &#39;eh-menu-dark&#39;,
  fullWidth: &#39;eh-menu-full-width&#39;,
  light: &#39;eh-menu-light&#39;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Hopefully, that provides some context for why we&#39;re manipulating the class names and some understanding of where we&#39;re heading with our development. For now we&#39;re not concerned with classes, just the sheet, so let&#39;s get back to work.&lt;/p&gt;
&lt;h3&gt;Back to work&lt;/h3&gt;
&lt;p&gt;Let&#39;s sort out a key for state.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-typescript&quot;&gt;const key = options.meta === styleSheetFactoryOptions.meta ? JSON.stringify(styles) : options.meta;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The last thing we did before taking a break was spread the options argument over the default stylesheet factory options. If no meta was provided in the argument, the meta will be the default. Since the default never changes, it is not a unique key in the way that eh-menu would be. That means the styles with the default key might not be the same as another styles with the default key. In the case of a custom key, it is. So, to get a unique key, stringify the styles.&lt;/p&gt;
&lt;p&gt;If we do have a custom meta, use it.&lt;/p&gt;
&lt;p&gt;Now select the sheet from the store. If it&#39;s in the store, we&#39;ll get a stylesheet object, if not, it will be undefined.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-typescript&quot;&gt;const sheet = key ? store.getState().sheets[key] : key;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If we just select from the store, Typescript knows it could possibly be undefined and will throw an error. The ternary makes TS happy.&lt;/p&gt;
&lt;p&gt;The constant, &lt;strong&gt;sheet&lt;/strong&gt;, will be either a stylesheet object, or undefined.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-typescript&quot;&gt;const stylesheet: StyleSheet = sheet ? sheet : createStylesheet(styles, options).attach();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If it&#39;s a stylesheet object, there is no need to call the stylesheet creator. If it is undefined, then we call the creator, and attach it to the markup. The stylesheet object has an &lt;strong&gt;attach&lt;/strong&gt; method, which you see called after the creator returns a stylesheet object.&lt;/p&gt;
&lt;p&gt;Remember, if there is a sheet in the store, then that sheet is attached to the markup. We only call &lt;strong&gt;attach&lt;/strong&gt; on a new stylesheet object.&lt;/p&gt;
&lt;p&gt;Then we dispatch it to the store in a type safe way.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-typescript&quot;&gt;if (key) {
  store.dispatch(addSheet({ [key]: stylesheet }));
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After which, we return the stylesheet object.&lt;/p&gt;
&lt;p&gt;Don&#39;t forget to add it to the barrel.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-typescript&quot;&gt;// file: /src/styles/provideStylesheet/index.ts

export { default } from &#39;./provideStylesheet&#39;;
export * from &#39;./provideStylesheet&#39;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Followed by adding the exports to the parent folder index.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-typescript&quot;&gt;// snippet from file: /src/styles/index.ts

export { default as provideStylesheet } from &#39;./provideStylesheet/index&#39;;
export * from &#39;./provideStylesheet/index&#39;;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Tests&lt;/h2&gt;
&lt;p&gt;Now we can write some tests. First, a test for the helper we added.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-typescript&quot;&gt;// file: /src/helpers/fromCamelToDash.test.ts

import fromCamelToDash from &#39;./fromCamelToDash&#39;;

describe(&#39;fromCamelToDash&#39;, () =&amp;gt; {
  it(&#39;should covert camel case to dash case&#39;, () =&amp;gt; {
    const initialString = &#39;callMeIshmael&#39;;
    const expectedString = &#39;call-me-ishmael&#39;;
    const returnedString = fromCamelToDash(initialString);
    expect(returnedString).toBe(expectedString);
  });
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then a test for the stylesheet provider.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-typescript&quot;&gt;// file: /src/styles/provideStylesheet/provideStylesheet.test.ts

import { Styles, StyleSheet, StyleSheetFactoryOptions } from &#39;jss&#39;;
import provideStylesheet from &#39;./provideStylesheet&#39;;
import createStyles from &#39;../createStyles/index&#39;;

const styles: Styles = createStyles({
  root: {
    display: &#39;block&#39;
  }
});

const options: StyleSheetFactoryOptions = {
  meta: &#39;test-sheet&#39;
};

describe(&#39;provideStylesheet&#39;, () =&amp;gt; {
  it(&#39;should return a stylesheet&#39;, () =&amp;gt; {
    const styleSheet: StyleSheet = provideStylesheet(styles);
    expect(styleSheet).toBeTruthy();
  });

  it(&#39;should return a stylesheet with custom options&#39;, () =&amp;gt; {
    const styleSheet: StyleSheet = provideStylesheet(styles, options);
    expect(styleSheet).toBeTruthy();
  });

  it(&#39;should attach the stylesheet&#39;, () =&amp;gt; {
    provideStylesheet(styles, options);
    const styleSheet = document.querySelector(`style[data-meta=${options.meta}]`);
    expect(styleSheet).toBeTruthy();
  });
});
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Build&lt;/h2&gt;
&lt;p&gt;Now we can test Rollup.&lt;/p&gt;
&lt;p&gt;Add a build script to your &lt;strong&gt;package.json&lt;/strong&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;&amp;quot;build&amp;quot;: &amp;quot;rimraf dist &amp;amp;&amp;amp; rollup -c &amp;amp;&amp;amp; tsc&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In a terminal, run&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;npm run build
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You should see Rollup do some stuff, then you should have a &lt;strong&gt;dist&lt;/strong&gt; folder in your project. This is as far as we&#39;ll go with Rollup for now. Packaging is the subject of a project of its own, and we&#39;ll return to it much later. We&#39;ll keep our attention on the theming engine and get enough out of Rollup to test it in a controlled environment.&lt;/p&gt;
&lt;h2&gt;Finish&lt;/h2&gt;
&lt;p&gt;In this exercise, we focused almost entirely on the stylesheet provider. Spending time considering the functionality and how we&#39;ll use it, as well as the design decisions, helps us understand what we&#39;ll be building next.&lt;/p&gt;
&lt;p&gt;We learned about classes and how we can use them to access our class names. In a coming exercise, we&#39;ll build a classes provider and interpolate class names into markup.&lt;/p&gt;
&lt;p&gt;Next time, however, it&#39;s time to think about themes.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Building a design system 1 - setup</title>
    <summary>The first step in building a design system from scratch is setting up a repo, dependencies, testing, types, and state management.</summary>
    <link href="https://www.tonympdx.com/blog/post/building-a-design-system-1-setup"/>
    <updated>2022-08-27T19:20:11.956Z</updated>
    <id>https://www.tonympdx.com/blog/post/building-a-design-system-1-setup</id>
    <content xml:lang="en" type="html">&lt;p&gt;Let&#39;s begin. If you like, you can review the &lt;a href=&quot;https://www.tonympdx.com/blog/post/building-a-design-system-introduction/&quot;&gt;introduction&lt;/a&gt; before we proceed.&lt;/p&gt;
&lt;p&gt;In this walkthrough, we&#39;ll set up a repository and start adding to it. Our design system repo covers all the groundwork, and we&#39;ll add the first code.&lt;/p&gt;
&lt;p&gt;The code for this post is available at:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/tonym/whirlwind/tree/lesson-1&quot;&gt;https://github.com/tonym/whirlwind/tree/lesson-1&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Goals&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Install dependencies&lt;/li&gt;
&lt;li&gt;Add some Typescript types&lt;/li&gt;
&lt;li&gt;Set up state management&lt;/li&gt;
&lt;li&gt;Configure testing&lt;/li&gt;
&lt;li&gt;Add a function to create a stylesheet&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Skills&lt;/h2&gt;
&lt;p&gt;You should know how to set up a Git repo, have a basic understanding of Typescript, and be familiar with Jest and Redux.&lt;/p&gt;
&lt;h2&gt;Difficulty level&lt;/h2&gt;
&lt;p&gt;Advanced. This is an advanced tutorial and assumes that you are a moderately experienced frontend developer. Beginning developers may find this challenging.&lt;/p&gt;
&lt;h2&gt;Overview&lt;/h2&gt;
&lt;p&gt;This is the first step on our way to building the engineering side of a design system. The design side will be discussed later, but for now, we&#39;re going to set up the things we need to create themes, then add tokens.&lt;/p&gt;
&lt;p&gt;The ultimate goal of our system is the consistent application of UX via components which, as we will see, do not always have to be part of the design system, and the consistent application of style via a theming engine, which is where we&#39;re starting in this exercise.&lt;/p&gt;
&lt;p&gt;For the designer, this means consistent appearance and functionality, and for the developer, this means style and UX come ready-made, and when the designer changes the design, there is no refactoring. We are creating an automated application of style and user experience.&lt;/p&gt;
&lt;h2&gt;Repositories&lt;/h2&gt;
&lt;p&gt;This project requires three repositories, one for the design system because it will be distributed via NPM, another for a monorepo with our test applications, and a third optional repo for Angular. If you&#39;d like to test with Angular, having it in its own repo may not be necessary, considering how you build your monorepo. Our monorepo will use Lerna and possibly Astro, which doesn&#39;t work with Angular, so I isolate NG on an island of its own.&lt;/p&gt;
&lt;p&gt;For now, only the design system repo is needed. We won&#39;t go into how to create a repo here, but if you are following along, create a new repo, and let&#39;s start adding some dependencies.&lt;/p&gt;
&lt;h2&gt;Dependencies&lt;/h2&gt;
&lt;p&gt;Over the course of this project, we&#39;ll add dependencies as we need them. For this exercise, install the following:&lt;/p&gt;
&lt;h3&gt;JSS&lt;/h3&gt;
&lt;p&gt;The JSS package transpiles JSS to CSS and injects a stylesheet into the head of an HTML document. We&#39;ll also install the default preset.&lt;/p&gt;
&lt;p&gt;JSS documentation: &lt;a href=&quot;https://cssinjs.org/&quot;&gt;https://cssinjs.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Install using NPM or Yarn:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;npm install jss jss-preset-default
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;or&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;yarn add jss jss-preset-default
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Redux&lt;/h3&gt;
&lt;p&gt;Redux is for state management. While JSS comes with a stylesheet manager, we have more things than stylesheets in our store. Eventually, the store will have stylesheets, themes, and tokens, but we&#39;ll deal with themes and tokens later. For now, we&#39;ll build the store with placeholders.&lt;/p&gt;
&lt;p&gt;Redux documentation: &lt;a href=&quot;https://redux.js.org/&quot;&gt;https://redux.js.org/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Install using NPM or Yarn:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;npm install redux
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;or&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;yarn add redux
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Typescript&lt;/h3&gt;
&lt;p&gt;Install using NPM or Yarn:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;npm install --save-dev typescript
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;or&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;yarn add --dev typescript
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Jest&lt;/h3&gt;
&lt;p&gt;For our tests, install jest version 28&lt;/p&gt;
&lt;p&gt;Install using NPM or Yarn:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;npm install --save-dev jest@^28.1.8
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;or&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;yarn add --dev jest@^28.1.8
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For this project, we&#39;re using the &lt;strong&gt;jsdom&lt;/strong&gt; test environment which is no longer included in the core Jest package.&lt;/p&gt;
&lt;p&gt;Install using NPM or Yarn:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;npm install --save-dev jest-environment-jsdom
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;or&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;yarn add --dev jest-environment-jsdom
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now add the Jest preset for Typescript.&lt;/p&gt;
&lt;p&gt;Install using NPM or Yarn:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;npm install --save-dev ts-jest
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;or&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;yarn add --dev ts-jest
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Since we&#39;re using Typescript, we need some types. Types are included in Jest core; however, if we want to use those, they must be imported into every test. If you don&#39;t want to do that, add the types from Definitely Typed.&lt;/p&gt;
&lt;p&gt;Install using NPM or Yarn:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;npm install --save-dev @types/jest
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;or&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;yarn add --dev @types/jest
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Optionally, if you like JUnit output for your tests, install the Jest JUnit plugin.&lt;/p&gt;
&lt;p&gt;Install using NPM or Yarn:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;npm install --save-dev jest-junit
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;or&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;yarn add --dev jest-junit
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;CSSType&lt;/h3&gt;
&lt;p&gt;JSS provides JSS types, but we also need CSS types.&lt;/p&gt;
&lt;p&gt;Install using NPM or Yarn:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;npm install --save-dev csstype
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;or&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;yarn add --dev csstype
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Configure Typescript&lt;/h2&gt;
&lt;p&gt;Add these three files to the project root.&lt;/p&gt;
&lt;p&gt;tsconfig.json&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
  &amp;quot;compilerOptions&amp;quot;: {
    &amp;quot;baseUrl&amp;quot;: &amp;quot;.&amp;quot;,
    &amp;quot;target&amp;quot;: &amp;quot;es5&amp;quot;,
    &amp;quot;module&amp;quot;: &amp;quot;esnext&amp;quot;,
    &amp;quot;lib&amp;quot;: [&amp;quot;esnext&amp;quot;, &amp;quot;dom&amp;quot;],
    &amp;quot;declaration&amp;quot;: true,
    &amp;quot;sourceMap&amp;quot;: false,
    &amp;quot;outDir&amp;quot;: &amp;quot;./dist&amp;quot;,
    &amp;quot;rootDir&amp;quot;: &amp;quot;./src&amp;quot;,
    &amp;quot;strict&amp;quot;: true,
    &amp;quot;noImplicitAny&amp;quot;: false,
    &amp;quot;strictNullChecks&amp;quot;: true,
    &amp;quot;strictFunctionTypes&amp;quot;: true,
    &amp;quot;strictBindCallApply&amp;quot;: true,
    &amp;quot;strictPropertyInitialization&amp;quot;: false,
    &amp;quot;noImplicitThis&amp;quot;: true,
    &amp;quot;noUnusedLocals&amp;quot;: false,
    &amp;quot;noUnusedParameters&amp;quot;: false,
    &amp;quot;noImplicitReturns&amp;quot;: true,
    &amp;quot;noFallthroughCasesInSwitch&amp;quot;: true,
    &amp;quot;moduleResolution&amp;quot;: &amp;quot;node&amp;quot;,
    &amp;quot;experimentalDecorators&amp;quot;: true,
    &amp;quot;resolveJsonModule&amp;quot;: true,
    &amp;quot;skipLibCheck&amp;quot;: true
  },
  &amp;quot;exclude&amp;quot;: [&amp;quot;**/dist&amp;quot;, &amp;quot;**/*.test*&amp;quot;, &amp;quot;**/testing&amp;quot;]
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;tsconfig.dev.json&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
  &amp;quot;extends&amp;quot;: &amp;quot;./tsconfig.json&amp;quot;,
  &amp;quot;include&amp;quot;: [&amp;quot;./src/**/*&amp;quot;]
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;tsconfig.test.json&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
  &amp;quot;extends&amp;quot;: &amp;quot;./tsconfig.json&amp;quot;,
  &amp;quot;compilerOptions&amp;quot;: {
    &amp;quot;allowJs&amp;quot;: true,
    &amp;quot;outDir&amp;quot;: &amp;quot;./out-tsc/spec&amp;quot;,
    &amp;quot;esModuleInterop&amp;quot;: true,
    &amp;quot;emitDecoratorMetadata&amp;quot;: true,
    &amp;quot;sourceMap&amp;quot;: true,
    &amp;quot;types&amp;quot;: [&amp;quot;jest&amp;quot;, &amp;quot;node&amp;quot;]
  },
  &amp;quot;files&amp;quot;: [&amp;quot;./src/test.ts&amp;quot;],
  &amp;quot;include&amp;quot;: [&amp;quot;./src/**/*.test.ts&amp;quot;, &amp;quot;./src/**/*.d.ts&amp;quot;]
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Configure Jest&lt;/h2&gt;
&lt;p&gt;Add jest.config.js to the project root.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;module.exports = {
  coveragePathIgnorePatterns: [&#39;/node_modules/&#39;, &#39;index.ts&#39;],
  globals: {
    &#39;ts-jest&#39;: {
      tsconfig: &#39;tsconfig.test.json&#39;
    }
  },
  moduleFileExtensions: [&#39;ts&#39;, &#39;js&#39;],
  preset: &#39;ts-jest&#39;,
  testEnvironment: &#39;jsdom&#39;,
  testMatch: [&#39;**/?(*.)+(test).ts?(x)&#39;],
  transform: { &#39;^.+\\.(js|jsx|ts|tsx)$&#39;: &#39;ts-jest&#39; },
  reporters: [&#39;default&#39;, &#39;jest-junit&#39;]
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We need a way to run our tests, so add these NPM scripts to your pacakge.json &lt;strong&gt;scripts&lt;/strong&gt; section:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt; &amp;quot;test&amp;quot;: &amp;quot;jest --maxWorkers=50%&amp;quot;,
 &amp;quot;test:dev&amp;quot;: &amp;quot;jest --clearCache &amp;amp;&amp;amp; jest --coverage --no-cache --maxWorkers=50%&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;strong&gt;test:dev&lt;/strong&gt; script will show test coverage in the terminal when you run it. The &lt;strong&gt;maxWorkers&lt;/strong&gt; argument is a recommended performance setting.&lt;/p&gt;
&lt;h2&gt;File structure&lt;/h2&gt;
&lt;p&gt;At this point, your repo file structure should look like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;| node_modules
| .gitignore
| jest.config.js
| LICENSE // if you created one
| package-lock.json
| package.json
| README.md
| tsconfig.dev.json
| tsconfig.json
| tsconfig.test.json
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now create a src folder and add a store folder for our Redux store, a styles folder for our theming engine functions, and a types folder for our typescript types.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;| node_modules
| src
|- store
|- styles
|- types
| .gitignore
| jest.config.js
| LICENSE
| package-lock.json
| package.json
| README.md
| tsconfig.dev.json
| tsconfig.json
| tsconfig.test.json
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Add types&lt;/h2&gt;
&lt;p&gt;These are the types we&#39;ll need for this exercise. Create a types.ts file in the types folder. There is some preparation for later, and some placeholder, and we&#39;ll step through it line by line, but this is what the file should look like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-typescript&quot;&gt;import { StyleSheet as StyleSheetJSS } from &#39;jss&#39;;

export interface Theme {}

export const ADD_SHEET = &#39;ADD_SHEET&#39;;

export type StyleSheet = StyleSheetJSS;

export type Sheet&amp;lt;K extends keyof any, StyleSheet&amp;gt; = { [P in K]: StyleSheet };

interface AddSheetAction {
  type: typeof ADD_SHEET;
  sheet: Sheet&amp;lt;string, StyleSheet&amp;gt;;
}

export type ActionTypes = AddSheetAction;

export interface State {
  sheets: Sheet&amp;lt;string, StyleSheet&amp;gt;;
  theme: Theme;
}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;First, import the StyleSheet type from JSS and import it as StyleSheetJSS. Assign it to a &lt;strong&gt;StyleSheet&lt;/strong&gt; type. We do this in case we have to extend the type later, and, more importantly, so we can import it from our types instead of the JSS node module.&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;Theme&lt;/strong&gt; interface is a placeholder. We&#39;ll get to themes in a later walkthrough, but for now, an empty object will let us get started.&lt;/p&gt;
&lt;p&gt;Everything else is for our store. We have one action type, &lt;strong&gt;ADD_SHEET&lt;/strong&gt;, and the action, &lt;strong&gt;AddSheetAction&lt;/strong&gt;. They are exported as &lt;strong&gt;ActionTypes&lt;/strong&gt;. Although not obvious here, &lt;strong&gt;ActionTypes&lt;/strong&gt; is a union type, and as we add actions, we&#39;ll add them to the &lt;strong&gt;ActionTypes&lt;/strong&gt; type.&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;State&lt;/strong&gt; interface is our store. Again, the &lt;strong&gt;theme&lt;/strong&gt; type is just a placeholder for now.&lt;/p&gt;
&lt;p&gt;Finally, add an index to the folder.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-typescript&quot;&gt;// file: /src/types/index.ts

export * from &#39;./types&#39;;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Configure the store&lt;/h2&gt;
&lt;p&gt;Our host application may need many stylesheets. No, that&#39;s wrong. A host application WILL need many stylesheets, and we don&#39;t want to duplicate them. Only one stylesheet for any given component should be in the markup. To manage the sheets and prevent duplicates, we&#39;ll use Redux.&lt;/p&gt;
&lt;h3&gt;Actions&lt;/h3&gt;
&lt;p&gt;At this point, we need one action, an action to add sheets to the store.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-typescript&quot;&gt;// file: /src/store/actions.ts

import { ActionTypes, ADD_SHEET, Sheet, StyleSheet } from &#39;../types/index&#39;;

export function addSheet(sheet: Sheet&amp;lt;string, StyleSheet&amp;gt;): ActionTypes {
  return { type: ADD_SHEET, sheet };
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Do you notice how the types are imported explicitly from the index file? This is because all imports from our codebase should come from a single barrel. The index files that export from the files in a folder is the barrel, and while we could import from the files themselves, it&#39;s preferable to import from the barrel, which is also our public API. Our bundle will then have a single entry point, which is helpful for the requirements of certain host applications, some bundling schemes, and Angular&#39;s AOT compiler if you have to support that.&lt;/p&gt;
&lt;h3&gt;Reducer&lt;/h3&gt;
&lt;p&gt;The reducer updates the store and holds the initial state.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-typescript&quot;&gt;// file: /src/store/reducer.ts

import { ActionTypes, ADD_SHEET, State } from &#39;../types/index&#39;;

export const initialState: State = {
  sheets: {},
  theme: {}
};

export function reducer(
  state: State = initialState,
  action: ActionTypes
): State {
  switch (action.type) {
    case ADD_SHEET:
      const sheets = { ...state.sheets, ...action.sheet };
      return { ...state, sheets: sheets };
    default:
      return state;
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Again, we import types from the barrel, then declare the &lt;strong&gt;initialState&lt;/strong&gt;. State will hold many &lt;strong&gt;sheets&lt;/strong&gt; and one &lt;strong&gt;theme&lt;/strong&gt;. &lt;strong&gt;Sheets&lt;/strong&gt; are the stylesheets we&#39;ll soon create, and they get dispatched to the store with a key, and the sheet. When JSS creates a stylesheet, we can provide it with some options, including a &lt;strong&gt;meta&lt;/strong&gt; property which is a unique identifier string. That string is what we will use as our sheet key in the state &lt;strong&gt;sheets&lt;/strong&gt; object. We can check for the existence of that key and reuse the sheet instead of creating a new one. Further, we will be able to know that if the sheet is in the store, it is in the markup, and we don&#39;t have to attach it again. So if we have ten buttons on our host page, only one button stylesheet will be in the page HEAD.&lt;/p&gt;
&lt;h3&gt;Initialize&lt;/h3&gt;
&lt;p&gt;Now we need a way to initialize the store and make it available to the theming engine.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-typescript&quot;&gt;// file: /src/store/store.ts

import { createStore, Store } from &#39;redux&#39;;
import { reducer } from &#39;./reducer&#39;;

export const store: Store = createStore(reducer);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We pass the reducer to the store constructor. The reducer is imported from the reducer file because it is in the same folder as our working file. If we import from the barrel in the same folder as the file we&#39;re importing from, we&#39;ll have a circular dependency error in both Rollup and the optional Angular compiler when we create our NPM package.&lt;/p&gt;
&lt;h3&gt;Export&lt;/h3&gt;
&lt;p&gt;Export everything.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-typescript&quot;&gt;// file: /src/store/index.ts

export * from &#39;./store&#39;;
export * from &#39;./actions&#39;;
export * from &#39;./reducer&#39;;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Defaults&lt;/h2&gt;
&lt;p&gt;Next, we should set up some defaults. We&#39;ll create a file called defaulTheme, which gives us a default theme, which is an empty object for now (we&#39;ll construct the theme later), and our default JSS options. For the JSS options, the defaults from the node package are all we need, but if at some point you need more options, they can be done here.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-typescript&quot;&gt;// file: /src/styles/defaultTheme/defaultTheme.ts

import { JssOptions } from &#39;jss&#39;;
import preset from &#39;jss-preset-default&#39;;
import { initialState } from &#39;../../store/reducer&#39;;
import { Theme } from &#39;../../types/types&#39;;

const defaultJssPlugins = preset();

export const defaultJssOptions: JssOptions = {
  ...defaultJssPlugins
};

export const defaultTheme: Theme = initialState.theme;

export default defaultTheme;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Notice how the theme is derived from &lt;strong&gt;intialState&lt;/strong&gt;. That&#39;s what makes it the default theme. In later exercises, we&#39;ll add the mechanism to construct a custom theme; however, the default, in many cases the default look of an application or the brand identity, is where design starts.&lt;/p&gt;
&lt;p&gt;It&#39;s a good time to mention the export scheme. Our theming engine, everything in the styles folder, is a collection of functions, not all of which may be needed in a host application. Each of these functions is its own file, and each file has a default export.&lt;/p&gt;
&lt;p&gt;Default exports enable path imports, and that enables tree-shaking. Our final bundle will include ES modules and CommonJS modules, plus accommodation for name imports and, optionally, a bundle for Angular Ivy, the AOT compiler used in newer versions of Angular.&lt;/p&gt;
&lt;p&gt;The Angular part only matters if you have to support Ivy, but everything else, which we will examine when we add Rollup and configure bundling, is designed to support different bundling strategies and tree-shaking, as well as CJS require statements.&lt;/p&gt;
&lt;h2&gt;The first creator&lt;/h2&gt;
&lt;p&gt;The theming engine relies on two types of functions: &lt;strong&gt;creators&lt;/strong&gt; and &lt;strong&gt;providers&lt;/strong&gt;. Creators create a thing, and providers provide that thing to the host application. We&#39;ll see our first provider in the next exercise, but our first creator happens now.&lt;/p&gt;
&lt;p&gt;This is a stylesheet creator. All it does is create a stylesheet. In the next exercise, we&#39;ll add a stylesheet provider which will take the created stylesheet, dispatch it to the store, and attach it to the HEAD of the host view. Before we can do that, however, we need a creator.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-typescript&quot;&gt;// file: /src/styles/createStylesheet/createStylesheet.ts

import jss, { Styles, StyleSheetFactoryOptions } from &#39;jss&#39;;
import { StyleSheet } from &#39;../../types/index&#39;;
import { defaultJssOptions } from &#39;../defaultTheme/index&#39;;

export default function createStylesheet(
  styles: Styles,
  options: StyleSheetFactoryOptions = {}
): StyleSheet {
  jss.setup(defaultJssOptions);
  return jss.createStyleSheet(styles, options);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;strong&gt;styles&lt;/strong&gt; property is a JSS styles object or CSS written as JSON. The &lt;strong&gt;options&lt;/strong&gt; property is JSS factory options for creating the stylesheet, which may include a &lt;strong&gt;meta&lt;/strong&gt; property (the stylesheet identifier) and an &lt;strong&gt;index&lt;/strong&gt;, which is the order of the stylesheets attached to the head. A sheet with an index of 1 will come before a sheet with an index of 3 in the host markup. The function then returns a JSS stylesheet object.&lt;/p&gt;
&lt;p&gt;Now that we can create a stylesheet, it&#39;s a good place to end the coding of this exercise and write some tests. So far, all we&#39;ve done is prepare. In the next part, we&#39;ll start using what we&#39;ve created, but let&#39;s not get ahead of ourselves. We don&#39;t want to use anything untested.&lt;/p&gt;
&lt;h2&gt;Testing the store&lt;/h2&gt;
&lt;p&gt;Now that we&#39;ve completed the code for this setup exercise, we&#39;ll write some tests beginning with the store.&lt;/p&gt;
&lt;h3&gt;Actions&lt;/h3&gt;
&lt;p&gt;Create a test file and add it to the store folder.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-typescript&quot;&gt;// file: /src/store/actions.test.ts

import { StyleSheetFactoryOptions } from &#39;jss&#39;;
import { addSheet } from &#39;./actions&#39;;
import { ADD_SHEET, StyleSheet } from &#39;../types/index&#39;;
import createStylesheet from &#39;../styles/createStylesheet/index&#39;;

const options: StyleSheetFactoryOptions = {
  meta: &#39;Styles&#39;
};
const stylesheet: StyleSheet = createStylesheet({}, options);

describe(&#39;Actions&#39;, () =&amp;gt; {
  it(`should create an ${ADD_SHEET} action`, () =&amp;gt; {
    const key = options.meta || &#39;&#39;;
    const sheet = { [key]: stylesheet };
    const action = addSheet(sheet);
    expect(action).toEqual({ type: ADD_SHEET, sheet });
  });
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Our setup includes an &lt;strong&gt;options&lt;/strong&gt; object. We&#39;ve discussed JSS factory options, but here we actually see it in use.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-typescript&quot;&gt;const options: StyleSheetFactoryOptions = {
  meta: &#39;Styles&#39;
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;These options are passed to the stylesheet creator. We don&#39;t need any styles, just a stylesheet to test our action creator so our styles can be an empty object.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-typescript&quot;&gt;const stylesheet: StyleSheet = createStylesheet({}, options);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There is only one test because there is only one action creator, so we test that it returns a proper action. When we assign a value to the &lt;strong&gt;key&lt;/strong&gt; constant, Typescript knows that it could be undefined or null, so we account for it conditionally.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-typescript&quot;&gt;const key = options.meta || &#39;&#39;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then create the sheet, call the action creator, and expect it to be correct.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-typescript&quot;&gt;const sheet = { [key]: stylesheet };
const action = addSheet(sheet);
expect(action).toEqual({ type: ADD_SHEET, sheet });
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Reducer&lt;/h3&gt;
&lt;p&gt;Create a reducer test file and add it to the store folder.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-typescript&quot;&gt;// file: /src/store/reducer.test.ts

import { StyleSheet, StyleSheetFactoryOptions } from &#39;jss&#39;;
import { reducer, initialState } from &#39;./reducer&#39;;
import { ActionTypes, ADD_SHEET } from &#39;../types/index&#39;;
import createStylesheet from &#39;../styles/createStylesheet/index&#39;;

describe(&#39;Reducer&#39;, () =&amp;gt; {
  it(`should add a sheet to state from an ${ADD_SHEET} action`, () =&amp;gt; {
    const options: StyleSheetFactoryOptions = {
      meta: &#39;Styles&#39;
    };
    const stylesheet: StyleSheet = createStylesheet({}, options);
    const key = options.meta || &#39;&#39;;
    const sheet = { [key]: stylesheet };
    const action: ActionTypes = { type: ADD_SHEET, sheet };
    const newState = reducer(initialState, action);
    const sheetInStore = newState.sheets[key];
    expect(sheetInStore).toEqual(stylesheet);
  });
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There is only one test because there is only one action, but the setup is the same, except we don&#39;t call the action creator.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-typescript&quot;&gt;const options: StyleSheetFactoryOptions = {
  meta: &#39;Styles&#39;
};
const stylesheet: StyleSheet = createStylesheet({}, options);
const key = options.meta || &#39;&#39;;
const sheet = { [key]: stylesheet };
const action: ActionTypes = { type: ADD_SHEET, sheet };
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we can call the reducer with the &lt;strong&gt;addSheet&lt;/strong&gt; action and expect to see the sheet in the store.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-typescript&quot;&gt;const newState = reducer(initialState, action);
const sheetInStore = newState.sheets[key];
expect(sheetInStore).toEqual(stylesheet);
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Store&lt;/h3&gt;
&lt;p&gt;The only thing the store file does is initialize the store, so we only need to check that it does what it claims.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-typescript&quot;&gt;// file: /src/store/store.test.ts

import { store } from &#39;./store&#39;;

describe(&#39;Store&#39;, () =&amp;gt; {
  it(&#39;should create&#39;, () =&amp;gt; {
    expect(store).toBeTruthy();
  });
});
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Testing the theming engine&lt;/h2&gt;
&lt;p&gt;So far, the theming engine only has two things in it, a &lt;strong&gt;defaultTheme&lt;/strong&gt; and a stylesheet creator. Let&#39;s finish this step with two more test files.&lt;/p&gt;
&lt;h3&gt;defaultTheme&lt;/h3&gt;
&lt;p&gt;Add a default theme test to the defaultTheme folder.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-typescript&quot;&gt;// file: /src/styles/defaultTheme/defaultTheme.test.ts

import { defaultJssOptions, defaultTheme } from &#39;./defaultTheme&#39;;

describe(&#39;defaultTheme&#39;, () =&amp;gt; {
  it(&#39;should return default JSS options&#39;, () =&amp;gt; {
    expect(defaultJssOptions).toBeTruthy();
  });

  it(&#39;should return a default theme&#39;, () =&amp;gt; {
    expect(defaultTheme).toBeTruthy();
  });
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The default theme exports two constants. Our tests should check that they exist.&lt;/p&gt;
&lt;h3&gt;Stylesheet creator&lt;/h3&gt;
&lt;p&gt;Add a test for the stylesheet creator.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-typescript&quot;&gt;// file: /src/styles/createStylesheet/createStylesheet.test.ts

import createStylesheet from &#39;./createStylesheet&#39;;

const styles = {
  body: {
    margin: &#39;auto&#39;
  }
};

const stylesheet = createStylesheet(styles);

const styleRule = stylesheet.getRule(&#39;body&#39;);

describe(&#39;createStylesheet&#39;, () =&amp;gt; {
  it(&#39;should create&#39;, () =&amp;gt; {
    expect(stylesheet).toBeTruthy();
  });

  it(&#39;should create valid CSS from JSS&#39;, () =&amp;gt; {
    expect(styleRule.toString()).toMatch(&#39;margin: auto;&#39;);
  });
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This test checks that we have a valid JSS stylesheet object as the return value. We don&#39;t have to test the JSS stylesheet object itself because it is tested by the tests in the JSS NPM package. Assuming we can trust them (if you don&#39;t, you can run them and check the coverage), it is enough for us to check that a rule we add is in the object.&lt;/p&gt;
&lt;p&gt;The setup is creating a styles object, then creating a stylesheet, then selecting our rule from the created stylesheet. The &lt;strong&gt;getRule&lt;/strong&gt; function is a method of the JSS stylesheet object.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-typescript&quot;&gt;const styles = {
  body: {
    margin: &#39;auto&#39;
  }
};

const stylesheet = createStylesheet(styles);

const styleRule = stylesheet.getRule(&#39;body&#39;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We then test that the stylesheet has been created.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-typescript&quot;&gt;it(&#39;should create&#39;, () =&amp;gt; {
  expect(stylesheet).toBeTruthy();
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then we test that it is what we expect. Remember, we put JSS in, and we get CSS out, so our &lt;strong&gt;body&lt;/strong&gt; rule should be CSS in the stylesheet object.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-typescript&quot;&gt;it(&#39;should create valid CSS from JSS&#39;, () =&amp;gt; {
  expect(styleRule.toString()).toMatch(&#39;margin: auto;&#39;);
});
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Create a public API&lt;/h2&gt;
&lt;p&gt;So far, as we&#39;ve written our code, we&#39;ve exported from the files and folders we&#39;ve created. Let&#39;s create our public API by adding index files to containing folders and the root. This is already done for the store because there are no subfolders, but we haven&#39;t done so for the styles folder.&lt;/p&gt;
&lt;p&gt;Add contents of the styles folder to the index.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-typescript&quot;&gt;// file: /src/styles/index.ts

export { default as createStylesheet } from &#39;./createStylesheet/index&#39;;
export * from &#39;./createStylesheet/index&#39;;

export { default as defaultTheme } from &#39;./defaultTheme/index&#39;;
export * from &#39;./defaultTheme/index&#39;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next, create a file called public-api.ts and add it to src.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-typescript&quot;&gt;// file: /src/public-api.ts

export * from &#39;./store/index&#39;;
export * from &#39;./styles/index&#39;;
export * from &#39;./types/index&#39;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Lastly, an index that exports from public-api. The public-api file is for Angular. Angular default is an export from a public-api.ts file, but if you are not supporting Angular, there is no need for public-api.ts, and you can use whatever filename you like. Typically it would be index, which is what we add next.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-typescript&quot;&gt;// file: /src/index.ts

export * from &#39;./public-api&#39;;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Finish&lt;/h2&gt;
&lt;p&gt;At this point, we can run the tests. We&#39;ll use &lt;strong&gt;test:dev&lt;/strong&gt; to see the coverage report.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;npm run test:dev
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If we did it right, our code is covered. You should see something like this in your terminal.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.sanity.io/images/5pnyimif/production/bdeb2ca7fcef23aab88007959e1a50af2a9f5d20-1678x838.png?w=600&quot; alt=&quot;undefined&quot;&gt;&lt;/p&gt;
&lt;p&gt;That&#39;s it! Confusing as it may be at this point, things will clear up once we start using what we&#39;ve done and adding more functionality. That will happen next time, even if all we&#39;ve done so far is setup. Hopefully, the tests give some idea of what we intend and where we&#39;re going. Next time, we&#39;ll start using what we&#39;ve built by adding a provider, attaching the stylesheet to the host markup, and dispatching it to the store.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.tonympdx.com/blog/post/building-a-design-system-2-setup-continued/&quot;&gt;Continue with part 2&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Design systems and design operations</title>
    <summary>Design systems are as common as their problems of adoption and support. Is there a way to encourage design systems thinking and adoption through organization and workflow?</summary>
    <link href="https://www.tonympdx.com/blog/post/design-systems-and-design-operations"/>
    <updated>2022-08-24T20:37:35.064Z</updated>
    <id>https://www.tonympdx.com/blog/post/design-systems-and-design-operations</id>
    <content xml:lang="en" type="html">&lt;p&gt;You&#39;ve built a world-class design system using the latest tools and created a theme-driven styling solution for your products. What do you do with it now? We think of design systems as tools designers use when creating product or brand assets and prototypes, but it&#39;s also a styling solution for constructing those assets. So it&#39;s as much an engineer&#39;s tool as a designer&#39;s, making the next step a matter of adoption. The value of a design system is its presence in all of the company&#39;s products, and the task of getting it there is just as important as having it. Adoption is vital, as is advocacy, education, maintenance, and support. Creating a design operations team is the best way to promote your design system and help those using it.&lt;/p&gt;
&lt;p&gt;Design operations teams are enabling teams. In the book &amp;quot;Team Topologies,&amp;quot; authors Matthew Skelton and Manuel Pais describe enabling teams as groups of specialists in one particular domain that cut across stream-aligned teams, supporting those teams while reserving time for research and study. The enabling team makes informed recommendations on workflow and tooling that other teams can use within their domains.&lt;/p&gt;
&lt;p&gt;DevOps is a classic example of an enabling team. They offer advice, support, knowledge, and standards to teams that each own development operations within their domain. DevOps may, for instance, provide uniform patterns of constant integration or security, assist the implementing teams, and periodically audit the work for consistency and quality.&lt;/p&gt;
&lt;p&gt;The same principles and patterns of DevOps and other enabling teams also serve design operations. Also, like other enabling teams, DesOps exists to support. Just as a conventional design team may work to create a brand identity, they don&#39;t own it, marketing does, and just as a conventional design team may work to create an excellent and consistent user experience, they don&#39;t own it, product or engineering does. Design supports the departments and teams who use or implement the output.&lt;/p&gt;
&lt;p&gt;In modern companies organized for agility, the service bureau model becomes a cost center and an obstacle. We mitigate the adverse effects by &amp;quot;embedding&amp;quot; designers on engineering teams. However, embedding is not integrating; those designers are not part of the development teams, yet they should be. Whatever their relationship to the team, it works when each design is specific to the development team&#39;s needs.&lt;/p&gt;
&lt;p&gt;Design systems change everything. They alleviate the burden of from-scratch designs and allow designers, through the principles of Atomic Design, to create experiences from consistent, tested patterns and components. Of course, creativity lies in the assembly, but embedded designers are still pushing towards the development team, where the development team should be pulling from the designers. Abstracting Atomic Design into the design system enables the development team.&lt;/p&gt;
&lt;p&gt;Adoption of the design system then becomes one of top-down advocacy. In a Team Topologies world, grass-roots initiatives are often fruitless. The natural impulse is more of the same, so instead of embedding designers, you now embed designers and design engineers on your development teams. Advocate for the system, and convince developers that it&#39;s good. Unfortunately, it abdicates the duties of an enabling team and poisons the development team by violating their established communication channels.&lt;/p&gt;
&lt;p&gt;Instead of barging into a stream-aligned team&#39;s domain and demanding change, start at the top. Advocate for management support and validation. Don&#39;t stop until you get high-level recognition of DesOps as an engineering peer, an enabling team with all the responsibilities and trust afforded to other enabling groups. Those embedded designers should be members of the development team, and your DesOps should include at least a design manager, a design systems designer, and a design systems engineer.&lt;/p&gt;
&lt;p&gt;Establish your DesOps communication channels. For example, have a dedicated Slack channel, host regular office hours, facilitate workshops, and write lots of documentation, all while researching new patterns, validating what you think you know, and growing your expertise. In addition, expect designers and engineers on stream-aligned teams to avail themselves of your knowledge and check on them from time to time.&lt;/p&gt;
&lt;p&gt;Work with management to ensure they know your activities and align your work with their system architecture and priorities. Insist that they, the company and department executives, communicate the necessity of using the organization process and following the recommendations of the enabling teams within their domains. Even though fostering interest via a grass-roots campaign may be possible, results will only be temporary.&lt;/p&gt;
&lt;p&gt;Wait a minute. What happens if you don&#39;t get management support, or your company organization can&#39;t facilitate DesOps? In the case of the former, it&#39;s a reality many face. Not everyone embraces change, and management may have different ideas on improving the product and the user experience. It&#39;s easy to say keep at it, but the truth is more complicated. Listen to them. As an enabling team, you are duty-bound to facilitate the company&#39;s and product&#39;s direction. It may be time to refactor your design system or support structure, or it may be time to write. Write those case studies, write those RFCs, and keep hosting workshops and brown bags until feedback becomes constructive, then listen and follow it.&lt;/p&gt;
&lt;p&gt;In the case of the latter, learn and study the company organization and fit yourself into it. Team Topologies is a great way to enable agility and evolution of teams and products, but not the only way. So carve out that niche, and move the product forward. Regardless of the situation, don&#39;t listen to the siren song of hearts and minds. Convincing developers and designers engaged in creating the product that your way is good is only temporary. They will, and should, follow the company&#39;s direction, and so should you.&lt;/p&gt;
&lt;p&gt;Creating a design system is hard, making it useful is harder, and keeping it relevant over time may seem impossible. Yet we must still shift our thinking in how we organize, structure our workflow, and communicate across teams to succeed. If your design system is to succeed, design operations become an essential part of the future.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>The Bone Shard Daughter</title>
    <summary>The Bone Shard Daughter, by Andrea Stewart. A review.</summary>
    <link href="https://www.tonympdx.com/blog/post/the-bone-shard-daughter"/>
    <updated>2022-08-12T21:36:00.000Z</updated>
    <id>https://www.tonympdx.com/blog/post/the-bone-shard-daughter</id>
    <content xml:lang="en" type="html">&lt;p&gt;The aging empire and rising rebellion, the reluctant hero and mysterious creature, the suffering masses, and the magical land are all well-worn tropes of literature. We often see it and read it in movies, comics, and books. It&#39;s tried and true and too often a cop-out, a lazy reach for the uninspired. In competent hands, however, it&#39;s a canvas upon which a capable storyteller weaves magic, a familiar template for the exceptional, and a recognized format that lets character and plot shine.&lt;/p&gt;
&lt;p&gt;The Bone Shard Daughter, the first book in The Drowning Empire series by Andrea Stewart, is an example of the latter. Stories that span volumes are problematic in their way, and one book should be enough, but concede the codified template of Tolkien and accept that they are inevitable. At least as far as fantasy goes, The Drowning Empire is what it is. So what, exactly?&lt;/p&gt;
&lt;p&gt;The central theme of The Bone Shard Daughter is identity. Stewart places her characters in an island world of her creation and gives them no help. Approaching the work is initially challenging because we don&#39;t know the characters, but neither do they. There are examples of memory loss and self-discovery that mercilessly inflict all classes of the strange world. Yet they are intertwined. We learn about the world as we learn about the characters, and we learn about the characters as we learn about the world. Yet only to a point.&lt;/p&gt;
&lt;p&gt;Through immersion in this island land, we experience the discovery as the characters do. What emerges is a rich and misunderstood history populated by people we don&#39;t know if we like. Who is the hero, and who is the villain? We don&#39;t know because they don&#39;t know either. So all the ingredients for the usual clash of power and revolt exist precisely where they are supposed to be, yet we&#39;re never really sure if what we see is what is.&lt;/p&gt;
&lt;p&gt;If that implies that the story is confusing or difficult, it&#39;s not. The plot moves along understandably while steadily increasing pace and suspense. We wonder along with the characters, not about them. The plot unfolds through their discovery, and, as one would expect, lines of conflict are drawn, even if in unexpected places.&lt;/p&gt;
&lt;p&gt;The writing is serviceable but concise. It never becomes unendurable, yet it&#39;s not as remarkable in a clearly identifiable style as in an author of lesser storytelling ability and stronger literary voice. In The Bone Shard Daughter, that&#39;s an excellent thing indeed. Stewart gets out of the way and lets her remarkable story shine unbolstered by flowery prose.&lt;/p&gt;
&lt;p&gt;The magical and fantasy elements of Stewart&#39;s world are never described. Instead, they are assumed, as one assumes the sensation of a warm breeze or the obligation of taxes. The characters know how it works (for the most part), but we don&#39;t. We learn by paying attention as one learns the cultural norms of a new place or country on their first arrival.&lt;/p&gt;
&lt;p&gt;If there&#39;s a downside to this wonderful read, it&#39;s that we don&#39;t get resolution, at least not enough. Blame that on being one book in a series, but the one book in the series does what it should do. It whets our appetite for more, which is less cynical than it sounds. At least you know what your next book is going to be. As for this one, it&#39;s worth checking out.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Building a design system - introduction</title>
    <summary>Have you ever wondered how to build a design system? Follow along and learn how to build to code side of a theme driven design system.</summary>
    <link href="https://www.tonympdx.com/blog/post/building-a-design-system-introduction"/>
    <updated>2022-08-07T18:20:00.000Z</updated>
    <id>https://www.tonympdx.com/blog/post/building-a-design-system-introduction</id>
    <content xml:lang="en" type="html">&lt;p&gt;Let&#39;s build a design system. Several years ago, I wanted a design system that works everywhere. I wasn&#39;t satisfied with component libraries for specific frameworks. They&#39;re great but not generic. So I set out to build one. I&#39;ll show you how I did it and how you can, too.&lt;/p&gt;
&lt;p&gt;Throughout several posts, I&#39;ll show you step by step how you can build a universal design system that works with any framework or no framework at all. There are many ways to accomplish this. This is how I do it.&lt;/p&gt;
&lt;h2&gt;What is it?&lt;/h2&gt;
&lt;p&gt;A design system is a styling solution, based on standards and guidelines, that abstracts designs into reusable patterns and isolates style and UX concerns in a tested, distributed artifact. In other words, a design system ensures consistent style and user experience, so designers don&#39;t have to start from scratch, nor do engineers. For example, in a web application, the design system decorates the front of the front end with a consistent look and behavior. The look might be the company brand identity or the application&#39;s appearance. The behavior is the user experience.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.sanity.io/images/5pnyimif/production/217e11109433c3bf261b0c7a3753650f0cf750e1-800x400.png?w=600&quot; alt=&quot;undefined&quot;&gt;&lt;span class=&quot;caption&quot;&gt;System diagram&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;The system diagram shows, at a high level, how the system works. The pattern library, in Figma or a similar tool, is a collection of token sets that describe different themes. The default theme will be our default theme.&lt;/p&gt;
&lt;p&gt;The theming engine is what we are building. It takes tokens from Figma. The tokens represent a theme, and we create a usable theme from them. The theme is used in our styles, which are applied to components in a library.&lt;/p&gt;
&lt;p&gt;Further, the theming engine can accept custom styles from the host application and return them as CSS.&lt;/p&gt;
&lt;h2&gt;Requirements&lt;/h2&gt;
&lt;p&gt;Our design system must support any framework or no framework and include themes. Furthermore, it should be fully tested and distributed in a tree-shakeable way that supports all import patterns.&lt;/p&gt;
&lt;p&gt;Let&#39;s break it into parts. The design system will have a theming engine, a component library, tokens, and a bundler. This series will focus on the theming engine and its use with third-party component libraries or headless components.&lt;/p&gt;
&lt;h2&gt;The stack&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Typescript&lt;/li&gt;
&lt;li&gt;JSS&lt;/li&gt;
&lt;li&gt;Redux&lt;/li&gt;
&lt;li&gt;Jest&lt;/li&gt;
&lt;li&gt;Storybook&lt;/li&gt;
&lt;li&gt;Yalc&lt;/li&gt;
&lt;li&gt;Rollup&lt;/li&gt;
&lt;li&gt;Lerna&lt;/li&gt;
&lt;li&gt;React&lt;/li&gt;
&lt;li&gt;MUI&lt;/li&gt;
&lt;li&gt;Radix&lt;/li&gt;
&lt;li&gt;Stitches&lt;/li&gt;
&lt;li&gt;Mustache&lt;/li&gt;
&lt;li&gt;Material design&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Disclaimers&lt;/h2&gt;
&lt;p&gt;As always, this is one way to solve a problem, not the way. There are many ways to accomplish what we&#39;re about to build, and some choices are for convenience. Material design is well known and valuable to us because we&#39;re building the code side of the system, not designing it. The theming engine is core Javascript, but we&#39;ll need React for components and Radix, Stitches, and Mustache to test everything.&lt;/p&gt;
&lt;p&gt;Ready? &lt;a href=&quot;https://www.tonympdx.com/blog/post/building-a-design-system-1-setup/&quot;&gt;Let&#39;s get started with part 1, setup&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Vesper</title>
    <summary>The Vesper, that often debated, completely misunderstood, and totally irrelevant cocktail from a movie everyone knows and the book that came before it.</summary>
    <link href="https://www.tonympdx.com/blog/post/vesper"/>
    <updated>2021-12-22T17:34:00.000Z</updated>
    <id>https://www.tonympdx.com/blog/post/vesper</id>
    <content xml:lang="en" type="html">&lt;p&gt;The Vesper, a tasty yet completely unnecessary cocktail, appears in Ian Fleming&#39;s novel Casino Royale when ordered by the book&#39;s main character, James Bond. Bond has just met his CIA counterpart, and, on the way to a casino, they stop for a drink and a meal. Our protagonist first orders a dry Martini, then reconsiders. &amp;quot;Three measures of Gordon&#39;s, one of vodka, half a measure of Kina Lillet. Shake it very well until it&#39;s ice-cold, then add a large thin slice of lemon peel.&amp;quot; When his companion questions the order, Bond explains, &amp;quot;I never have more than one drink before dinner. But I do like that one to be large and very strong and very cold and very well-made. I hate small portions of anything...&amp;quot; Packed within those few lines of prose are over fifty years of debate and complaint, yet everything is ideally suited for 1953.&lt;/p&gt;
&lt;p&gt;In later books, Fleming would wander through cocktail trends, as would the movies that followed. More so in the movies. The Vesper only appears in the first of many works, replaced later by Vodka Martinis and even later by leisure suit crayon drinks, those wonderful garish vodka-fueled buckets of kitsch so popular in the seventies. In Casino Royale, however, Bond drank gin.&lt;/p&gt;
&lt;p&gt;Let&#39;s begin with the matter that gets so many worked up and burdened with opinions. The Vesper, in the book, is shaken. So much speculation detailing conspiracy-level reasons with visions of secret agent subterfuge surrounds this drink, and the slightly relevant point in a novel no one reads makes it sound silly. In the early and mid-twentieth century, shaking drinks was standard. They were all shaken, and a shaken Martini was just trendy. As we would learn from later books and movies, Bond is relatively modern in leisure and appearance, so asking for a Martini in the style of the time is perfectly normal.&lt;/p&gt;
&lt;p&gt;Bond likes his cocktails big. Another aspect of early twentieth-century cocktails is that they are small. Powerful, indeed, but small. Fleming is not the first to deride minuscule proportions, other authors of the time were equally critical and thirsty, but the Vesper seems out of whack in the other direction. While it does foreshadow the ten-ounce Martinis of the nineties, it remains a reaction to the standard of the time, but how big is it?&lt;/p&gt;
&lt;p&gt;Consider the proportions. Fleming&#39;s recipe is in &amp;quot;measures,&amp;quot; which is not ounces. Order a Vesper at any bar today, and you will get an inappropriate amount of alcohol. Thinking of measures as parts gives you a more reasonable drink based on ratio, not specific volume; however, this still isn&#39;t correct. A measure, no longer used as a unit of volume and now forgotten, could have been understood in Fleming&#39;s time as 25ml, slightly less than an ounce, which is approximately 30ml. When mixed using the metric specifications of the book, you still get a big drink, but not as big as if using ounces. Now the Vesper starts to make sense in terms of quantity.&lt;/p&gt;
&lt;p&gt;So the Vesper is large, it&#39;s shaken, and, wait, Kina Lillet? Another point of discussion, but before we consider the aromatized wine, there is the subject of gin. Gordon&#39;s was the London dry gin of choice in the fictional moment when Bond ordered a Vesper with his CIA companion.&lt;/p&gt;
&lt;p&gt;Gordon&#39;s was founded in 1769 by Alexander Gordon, and with reason. It was the gin craze or a gin craze, there was more than one, but the gin parlors needed sauce. At the time, it would have been old tom gin, sweetened and sometimes aged, sipped neat at shady establishments across England. Over time, this evolved into the London dry gin we know today, and by 1900 or so, Gordon&#39;s had become Gordon&#39;s Dry Gin.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.sanity.io/images/5pnyimif/production/d8daee74356d45bd5a890ebc44fd5f742b8aff4f-500x750.jpg?w=600&quot; alt=&quot;undefined&quot;&gt;&lt;/p&gt;
&lt;p&gt;In time, Gordon&#39;s became synonymous with London dry gin. It&#39;s what you ordered, and business was good. However, they were not alone. There were other gin producers, and, also by 1900, Gordon&#39;s had merged with Tanqueray. Nevertheless, Gordon&#39;s was still the flagship product despite the merger and would have been the traditional juniper-forward, sharply focused gin we think of when we think of London dry gin.&lt;/p&gt;
&lt;p&gt;Today that gin is Tanqueray, Gordon&#39;s being capped at 40% ABV and sold on the budget shelf, but in the time of Casino Royale, the opposite was true. If making a Vesper today, Tanqueray is likely a closer choice to what Gordon&#39;s would have been then. The punch of Juniper in either offering, coupled with a higher ABV, would have been a tall order in a dry Martini. Enter vodka.&lt;/p&gt;
&lt;p&gt;In the aftermath of World War II, vodka was an exotic and stylish spirit suitable for the jet set, the high-born, and all who aspired to fashion and sophistication. It was THE trend in a world of cocktails just learning how versatile this clear, odorless spirit can be. Without modern, approachable gin like Bombay Sapphire, adding a little vodka to gin would soften the juniper punch. So don&#39;t use Bombay Sapphire in a Vesper. The vodka will cover the delicacy, but a gin like Gordon&#39;s, or Tanqueray, has little delicacy to smother.&lt;/p&gt;
&lt;p&gt;What vodka would have been in Fleming&#39;s Vesper? We don&#39;t know, but it would not have been Smirnoff, then the popular name brand vodka. Bond gets a little snobbish with the bartender when pointing out that a grain vodka would be better than a potato vodka, but it&#39;s a quibble. The bartender, of course, brushes the thirsty agent aside with a quip of his own. The implication is that any vodka will do, and, indeed, any good vodka will do.&lt;/p&gt;
&lt;p&gt;What will not do is vermouth. Instead, the Vesper calls for Kina Lillet, an aromatized wine known as quinquina or kina-kina. Quinquina gets its name from quinine, a bitter extract of cinchona bark most notably used in tonic water. In a gin and tonic, gin makes the bitter quinine palatable. Quinine adds a distinctly flavored bitterness to quinquina, giving Kina Lillet its name.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.sanity.io/images/5pnyimif/production/0ca5dea1dbdd87f2f24b98a6d51c06f67a371fe8-1000x1191.jpg?w=600&quot; alt=&quot;undefined&quot;&gt;&lt;/p&gt;
&lt;p&gt;Unfortunately, however, Kina Lillet no longer exists. In 1985, the once-popular quinquina rebranded as Lillet Blanc and gained sweetness as it lost bitterness. Gone from Lillet Blanc is the quinine. Brand reps from Lillet claim the recipe is the same, but marketing is sometimes untrustworthy. Anyone who&#39;s ever tasted tonic water knows what quinine tastes like, and if there is quinine in Lillet Blanc, there&#39;s not much of it. Will Lillet Blanc work in a Vesper? Sure, but it won&#39;t be the same. Common knowledge claims Cocchi Americano is a good sidestep from Kina Lillet, but who would know? Someone who remembers tasting Kina Lillet in the old days? Quinquina is still a thing, and there are good brands out there if you can find them, so try one and see if you like it.&lt;/p&gt;
&lt;p&gt;Is the Vesper, then, a Martini? Yes and no, kinda sorta. It is gin, and/or vodka, and vermouth(ish). That makes it a Martini, and there is modern precedent in recipes calling for blanc vermouth, a style between dry and sweet, in place of dry vermouth. It&#39;s also garnished with a lemon peel, something gone for a while but now as common as an olive. Should you order a Vesper in a bar? No. Should you make one at home? Yes, if you like stirred gin drinks. Really though, modern gin is better, modern vodka is smoother, and modern vermouth is abundant and delicious. In Fleming&#39;s time, some of that was true. Vodka helped tame the gin, and a small amount of wine helped balance it. The evolution and expansion of the spirits market and advances in production make the Vesper a cocktail of its time, not ours. Yet it&#39;s always there, in the popular culture, for the wrong reasons. It serves the novel in character development. It tells us something about Bond, whom we first meet in Casino Royal, and it tells us something about what Bond will be. He&#39;s not yet the suave, confident secret agent we know from the films. Casino Royale is the story of how he becomes that agent, and the Vesper is merely a detail, as is his clothing, Bentley, and skill at the tables. The Vodka Martini of later stories is much more suited to a modern cocktail menu. However, the Vesper can still be a delicious drink, even if it&#39;s outdated and unnecessary.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Is Team Topologies a pointless formality?</title>
    <summary>Effective development teams are essential and Team Topologies details how  teams can flourish and evolve. But does it work? Yes. These are some impressions from my experience with Team Topologies.</summary>
    <link href="https://www.tonympdx.com/blog/post/is-team-topologies-a-pointless-formality"/>
    <updated>2021-09-12T20:58:00.000Z</updated>
    <id>https://www.tonympdx.com/blog/post/is-team-topologies-a-pointless-formality</id>
    <content xml:lang="en" type="html">&lt;p&gt;There&#39;s a danger when considering the value of a process or pattern that projects the failure of the practitioner as the failure of the process. For example, the team that first tries Agile and fails in their goals may blame the process instead of their skill at using it. Clearly, with Agile as a standard and accepted development process, faults of failure likely exist in the implementation. The same is true of Team Topologies, and in the right hands, it&#39;s an effective organization pattern for large or growing businesses and departments.&lt;/p&gt;
&lt;p&gt;As more and more businesses work toward improved agility and efficiency, they also seek improved organization strategies as part of the initiative. Team Topologies, detailed in the 2019 book of the same name by authors Matthew Skelton and Manuel Pais, is one such strategy for organizing engineering teams. At the core, it is an adaptive model of organization that treats people, not products, as the basis of effective delivery and provides the opportunity to grow the organization to maturity. Sound familiar? If Agile is the day-to-day process of the products, Team Topologies is the day-to-day process of the people.&lt;/p&gt;
&lt;p&gt;Skelton and Pais lean heavily on Conway&#39;s Law which states, &amp;quot;Organizations, who design systems, are constrained to produce designs which are copies of the communication structures of these organizations.&amp;quot; Conway&#39;s Law has been around for a while, first theorized by Melvin Conway in 1967 and later enshrined in classic and respected tomes like Fred Brooks&#39; &amp;quot;The Mythical Man Month.&amp;quot; Skelton and Pais suggest a correlation does indeed exist between the company&#39;s organization and the systems they create. For example, an organization with one large team will have one large monolithic database or application, while teams organized by craft will have systems reflecting the needs of each craft.&lt;/p&gt;
&lt;p&gt;Leveraging the power, or inevitability, of Conway&#39;s Law, Team Topologies advocates for creating cross-discipline teams reflecting the domains of the system or systems. In other words, think of the architecture you want, then establish teams and communication vectors reflecting the architectural domains. Such patterns of organizing teams with an eye to the desired system structure emerged in the mid-2010s as the Reverse Conway Maneuver. Development operations, DevOps, is a clear example of this thinking where each domain team executes its operations rather than serving a monolithic cost center. The Reverse Conway Maneuver flipped the organizational pattern by making development operations part of each domain and DevOps a supporting, or enabling, team.&lt;/p&gt;
&lt;p&gt;Skelton and Pais define four different team types, stream-aligned, enabling, complicated subsystem, and platform. Each team plays a part in the overall production process. Stream-aligned teams own the software within their domain, enabling teams own no artifacts but provide knowledge and expertise to other teams, and so forth. The key to Team Topologies is understanding how the types of teams work and their communication vectors within and across domains, then ensuring the team structure reflects the architecture of the system they produce.&lt;/p&gt;
&lt;p&gt;What could possibly go wrong?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Hiring engineers first and thinking about the product later&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Traditionally companies hire engineers and put them on the org chart under &amp;quot;Engineering&amp;quot; then say, &amp;quot;go build this, that, or the other thing.&amp;quot; The result is a monolith. Avoiding the monolith means thinking ahead, and companies that hire an architect, design the system, then hire engineers and organize them into teams reflecting the domains of the system are the beneficiaries of Team Topologies. They succeed or fail by the quality of the architecture, or they adapt to changes in the architecture much the same way Agile teams adapt to changes in priorities.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Embracing the status-quo&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Modernizing companies may search for new patterns and processes as a means of continued relevance in the marketplace and may execute a practical implementation of Team Topologies, yet still struggle. Indeed they thought about the product, the architecture, and the teams. They organized domain teams that reflected the architecture they desired yet never realized the next version of the product. They remain dedicated to the legacy product, spend all their development time maintaining the monolith they want to deprecate, and never serve the next product generation. For whatever reason, the status-quo and the attention it demands prevents them from moving on.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Discouraging initiative&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Some companies may try Team Topologies and find an increase in top-down control or perceived limitations in domain flexibility. Engineers who once demonstrated initiative and curiosity now find it less advantageous. It&#39;s a balancing act for leadership. On the one hand, the formality of the organizational choices may require more management or direction while simultaneously impressing upon engineers their need to focus on what tasks they are assigned. The developer who once offered solutions to problems will not do so if the environment of formality now breeds increased management control or micro-management.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Too much focus on the developer experience&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Team Topologies requires a concerted effort at all levels. Focusing on &amp;quot;getting it right&amp;quot; or ensuring the domains are functioning as designed and maintaining alignment with system architecture can become reflexive and absorb effort that once went into the product or user experience. It&#39;s easy to lose interest in the customer when learning or implementing a new way of organizing teams.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Giving up&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Team Topologies is about evolution and creating teams that will grow as the product and associated domains grow. It&#39;s also about learning, and everyone has to learn together. It is not a short-term or immediate solution, and some companies may see it as an investment of time and money they are unwilling to pay. However, the return on that investment is more than reassuring for those who stick with it.&lt;/p&gt;
&lt;p&gt;So, is Team Topologies a pointless formality? No. Like Agile or any other tool, it is only as effective as the practitioners who wield it. Careful planning, determination, and long-term goals are required to make any process work, and Team Topologies is no different. As it becomes industry standard, like Agile before, it&#39;s worth the effort, and the dedicated, visionary companies who embark on the journey of organizational agility reap ever-increasing rewards.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Starbuck, Stubb, and Flask</title>
    <summary>A love letter to the literature in your glass, or how I find a way to write about Moby Dick every chance I get, then compare it to whiskey.</summary>
    <link href="https://www.tonympdx.com/blog/post/starbuck-stubb-and-flask"/>
    <updated>2021-06-12T18:32:00.000Z</updated>
    <id>https://www.tonympdx.com/blog/post/starbuck-stubb-and-flask</id>
    <content xml:lang="en" type="html">&lt;p&gt;Cocktail history is a foggy place. Misconceptions and misperceptions abound, from where they come from to how they’re made, but none rival the recurring fallacy that cocktails simply cover up poor quality spirits. Maybe that’s true to a point, cocktails originally served to soften the edge of harsh liquor, but only because the liquor at the time, even the best, just wasn’t as easily enjoyed as modern equivalents. This is no fault of the distillers, the technology was what it was and you do the best you can with what you have. Over time, cocktails evolved, became more complicated, more sophisticated, and, in some respects, developed into an art form. The impression of purpose, however, persists, even if we know better. Maybe it stems from the legacy of Prohibition, the oral history of bathtub gin, or frightful tales of wood alcohol in jugs, but, true as those tales may be, there’s more to it. Understanding the full story and appreciating the art, as with any art form, requires a degree of immersion. The studious, who develop an appreciation of well crafted cocktails, know that, more often than not, the cocktail serves to enhance a base spirit rather than hide it, but you have to get there first.&lt;/p&gt;
&lt;p&gt;The same can be said of any work of art, and the same can be seen in their example. How does one appreciate music, or painting, or literature, or understand their meaning and purpose? Understanding and appreciation take time, yet the work waits, all the while unashamedly asking of the audience as if asking of peers. You have to go to the art, it doesn’t come to you. Presenting a modern, ice cold, complicated and expensive cocktail, made with ice from a machine, in a fancy glass, to the whiskey drinker of 1851 is much like reading, or trying to read, Moby Dick. Who knows, or would know, what to make of it, either the cocktail or the book, for, like wine, whiskey, or cocktails to some, a masterpiece as renowned as the most classic of American novels is a tall order indeed, yet one of the most respected and timeless literary achievements of them all, even though Herman Melville buried his remarkable treasure behind an impenetrable wall of prose. Moby Dick is dense, it’s long, it’s confusing, it takes effort beyond measure and it will exhaust you. Until you figure it out.&lt;/p&gt;
&lt;p&gt;A cocktail as common as a Cosmopolitan would have baffled even Melville himself, for how would he know what to make of it? There would be no frame of reference, no understanding of the 100 plus years of technical advancement required to appreciate this bauble of the 1990s, and one can imagine he’d either marvel at it while grasping for some sort of reason, or sneer a very verbose and long winded, “what’s this?” just as the modern student is baffled when several pounds of Melville’s bludgeon are, for the first time, dropped on the desk like a hammer blow. Many will just walk away cracking a beer, and choosing contemporary, accessible art. It makes no sense, I don’t get it, and I’m not gonna waste my time. Thank you, next.&lt;/p&gt;
&lt;p&gt;Others will try, giving it a chance until defeated and wondering how the comedic jaunt of Ishmael’s first meeting with Queequeg, or Stubb’s relentless and upbeat chatter accompany an endless tale of obsession and revenge, yet at the same time detailing a young nation’s first great industry with clinical precision while Ahab actively thwarts all efforts at compassion and wealth. You’ll learn exactly how to fashion a harpoon, or harvest ambergris should the opportunity arise, and it’s all so out of place, but perfectly relevant, just like everything else in this book. It’s only the few left standing who appreciate Moby Dick, the few for whom the coin finally drops, who finally crack the code and realize it’s not what you read, it’s how you read it. Moby Dick is many books in one, a tale of a great sea voyage, a technical document on how whaling works, a meditation on the nature of obsession, a character study of flawed men sharing a great quest to which only Starbuck and perhaps the reader object. It’s a book that rewards those who break it apart and take it in pieces, arranging it in understandable chunks the same way one watches Citizen Kane or a Steven Soderbergh film which you have to parse and rearrange before it makes sense.&lt;/p&gt;
&lt;p&gt;Cocktails are like that, too. Yes, you can have a Martini, but do you like it? How much more do you appreciate it with knowledge of the component parts? If you know about gin, and appreciate the styles and varieties, if you know about vermouth, and know its forms and characteristics, you experience a Martini in a new and exciting way. Appreciating the parts becomes appreciating the whole, and it’s not lost on you when presented with a well crafted $18 cocktail. It’s more than an expensive WTF in a glass, and when you get there you understand what the art, and artist, have been asking of you all along, then you make it yours, and appreciate it on your terms.&lt;/p&gt;
&lt;p&gt;How often have you avoided using expensive whiskey in your cocktail because cocktails are for hiding, not showing, or you don’t want to “waste” fine liquor in a mixed drink? Change your tune. Appreciate craft cocktails as art, and learn about the story and characters of the literature that’s in your glass. Take a bottle of Bull Run American Whiskey and enjoy it neat. It’s best savored all on it’s own, then do all the whiskey things. Add a splash of water here, a cube of ice there, and see what it does. Then use it in a cocktail. Don’t scoff, put 2 ounces in a glass with a great big hunk of ice, some bitters, and a bit of sugar, then find things in this amazing whiskey you would have never found otherwise, like the layers of wonder buried in the seemingly inaccessible pages of Moby Dick, for a cocktail, among other things, should be an experience, not an excuse.&lt;/p&gt;
&lt;p&gt;2 oz Bull Run American Whiskey&lt;br&gt;
2 dashes Scrappy’s Aromatic Bitters&lt;br&gt;
2 dashes Simple syrup&lt;/p&gt;
&lt;p&gt;Build in a rocks glass with a single, large ice cube. Garnish with an orange twist.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Gibson</title>
    <summary>A cocktail with onions named for an artist. Is the Gibson named after Charles Dana Gibson? Stories abound, but if it is, who is this famed illustrator who liked onions in his Martini?</summary>
    <link href="https://www.tonympdx.com/blog/post/gibson"/>
    <updated>2021-06-06T00:02:00.000Z</updated>
    <id>https://www.tonympdx.com/blog/post/gibson</id>
    <content xml:lang="en" type="html">&lt;p&gt;Charles Dana Gibson was an American illustrator at the turn of the 20th century best known for his renowned and celebrated Gibson Girl, and, of course, the cocktail that bears his name. As usual, there are several stories of where the Gibson came from, but forget the others. It’s named for the artist, because he liked his Martini with onions.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.sanity.io/images/5pnyimif/production/9b92d323bc3a581d0c7863de95e051a24e802ab4-464x601.jpg?w=600&quot; alt=&quot;undefined&quot;&gt;&lt;span class=&quot;caption&quot;&gt;The Gibson Girl was known for fabulous hair, but there is no one single Gibson Girl. The name only refers to a woman as drawn by Charles Dana Gibson.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;The Gibson is a working class cocktail, free of frills, and dates to a time when illustration was a celebrated art form, an art form for the masses, and consumed on the pages of popular magazines, such as Life. In fact, it was to Life magazine that Gibson sold his first illustration in 1886, the start of a career that would make him one of history’s most successful and famous artists. Gibson himself, however, was anything but working class.&lt;/p&gt;
&lt;p&gt;Born of privilege, Gibson was a Blue Blood, a descendant of a respected New England political family, but he didn’t exploit it. Instead, he worked at his art, quickly becoming a prolific creator. He was 19 when he sold that illustration to Life, and, after celebrating the success by splurging for a 75 cent chicken pie, hit the ground running. The taste of success led him to create and sell. Soon he was regularly published in many, if not all, of the popular magazines at the time, and he was a genuine celebrity. But how? How does an artist become an international superstar?&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.sanity.io/images/5pnyimif/production/3a673c9b2948a1d135e6f774d9c5e36bd0d6b972-500x365.webp?w=600&quot; alt=&quot;undefined&quot;&gt;&lt;span class=&quot;caption&quot;&gt;Gibson produced more than the Gibson Girl. This illustration is part one of two, the original caption, “two strikes and the bases full.”&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;The 1890s and early 1900s were a different time. There were no movie theaters or anything like that. Although you could attend a performance, the only way to reach people at home, on their time, was magazines. The Victorian age gave us industry, and industry gave us mass production and mass entertainment in the form of magazines, and the heroes of those magazines were the illustrators, championed in the same way we regard movie stars today. Gibson was the most popular of them all, not only for his skill, but for his business sense, and very progressive attitudes toward society.&lt;/p&gt;
&lt;p&gt;His most well known creation, the Gibson Girl, presented women in a way never seen in print before then. Even today, the attitudes of the Gibson Girl still resonate. Of course, Gibson’s catalog contains so much more, he drew life as it was, sure, but also as he wanted it to be. Gibson put everyone on an even playing field, something that most definitely wasn’t the case in the reality of Edwardian times, and he took full advantage of his success. He became the editor of Life, and sold his work everywhere, printed on everything. It was on plates, mugs, posters, books, calendars, trinkets of every kind, anything you can imagine, and more. He was a marketing machine, and this is partly why the Gibson Girl is still so popular. Not only is it great art, it’s great marketing. Gibson created the template followed by the likes of Walt Disney, George Lucas, and all the great entertainment marketing minds. By the end of his career, Charles Dana Gibson was a superstar, a working class hero worthy of a working class cocktail.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.sanity.io/images/5pnyimif/production/1ae1b2589c973d5b221094b56aa911f7d02d0b1b-1456x961.webp?w=600&quot; alt=&quot;undefined&quot;&gt;&lt;span class=&quot;caption&quot;&gt;Gibson’s skill at capturing the emotion of a moment remains unmatched. The caption of this piece reads “In Paris, a cafe artist.”&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Working class cocktails don’t spark debate. Gibson liked his Martinis with onions, therefore, a Gibson is a Martini as the artist liked it, and nothing else. No, it isn’t a Martini, there is no debate over how to make it or what goes in it, and while you can add all sorts of stuff to a Martini, or even make it with vodka, a Gibson is gin, vermouth, and onions, served up, and that’s it.&lt;/p&gt;
&lt;p&gt;Nothing tastes like this unique cocktail, and it has the distinction as one of the few drinks whose last sip is better than the first because, onions, those wonderful pickled onions that flavor the drink the longer it sits. What do we put in it? The Gibson is a cocktail named for one of the greatest celebrities of his time, so of course we’re using Aviation Gin, a brand from a superstar celebrity of our time. We know the story of Ryan Reynolds and Aviation Gin already, and if you ever have a chance to visit House Spirits, where the gin is still made, ask to see the still, and be amazed at how tiny it is. Aviation Gin, now an international brand, is still made in the same equipment from which it was born, just as the Gibson is still made in the same way it was first poured. Ratios vary of course, so adjust to your liking or to the brands of gin or vermouth that you use, and while you’re at it, get to know the Gibson Girl again, too, because there’s nothing better than timeless art, both in the glass, and on the page.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.sanity.io/images/5pnyimif/production/46a577a37d6d1e74a119a4c076d78cbe9c097892-800x529.webp?w=600&quot; alt=&quot;undefined&quot;&gt;&lt;span class=&quot;caption&quot;&gt;The second frame. The captions reads, “fanned out.”&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;2 oz Gin&lt;/li&gt;
&lt;li&gt;1/2 oz Dry vermouth&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Stir and serve up. Garnish with a cocktail onion.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>The calories in cocktails</title>
    <summary>A detailed look at the calories in your booze, what calories are, how to calculate them, and how to consider your cocktails as part of your overall nutrition.</summary>
    <link href="https://www.tonympdx.com/blog/post/the-calories-in-cocktails"/>
    <updated>2021-05-31T01:11:00.000Z</updated>
    <id>https://www.tonympdx.com/blog/post/the-calories-in-cocktails</id>
    <content xml:lang="en" type="html">&lt;p&gt;How often do you think about calories when pouring a cocktail? Likely not often enough, especially if you’re already counting calories in food, or tracking your macros. This isn’t unusual as we don’t often consider the cocktail as a source of calories, at least not enough to make an impact, but you may be surprised to find that they do, can, and will affect your nutrition. This isn’t a dire warning, of course, but a little mindfulness can go a long way when considering alcohol consumption, and accounting for it as part of a nutrition or fitness plan.&lt;/p&gt;
&lt;h2&gt;What are calories?&lt;/h2&gt;
&lt;p&gt;Obviously, we’re not talking about those special occasions where you indulge, or perhaps over-indulge. Those times, as long as they’re not every day, are healthy, and everyone should have a moment, either with or without alcohol, to enjoy whatever requires celebrating, such as the end of finals, that new promotion, or a dear friend’s engagement. However, those days are not every day, and, if you enjoy a drink at happy hour, or a nightcap as part of your routine, it’s certainly advantageous to understand something about the impact those drinks have on your nutrition.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.sanity.io/images/5pnyimif/production/d2b22f41e3d29e0ab0dc8f0d02f4930c0bca0fc0-768x835.webp?w=600&quot; alt=&quot;undefined&quot;&gt;&lt;span class=&quot;caption&quot;&gt;Bomb calorimeter&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Does alcohol have calories? Yes it does, but to understand what it means to consume calories in cocktails, let’s first understand what is a calorie. Simply stated, a calorie is the amount of energy it takes to increase the temperature of one gram of water by one degree Celsius at standard atmospheric pressure. Calories are measured by placing an item in a contraption called a “bomb calorimeter,” a metal cup that sits in a small pool of water. The item is then oxidized, and the resulting effect on the temperature of the surrounding water will indicate the number of calories. Calories themselves are very small units of measure, and the numbers we use, and that are printed on packages at the grocery store, are in kilocalories, or Calories. A Calorie (with a capital “C”) is 1000 calories, as is a kilocalorie, which means you may see calories written as 200 Calories, 200 Cal, 200 C, or 200 kcal, all of which are synonymous.&lt;/p&gt;
&lt;p&gt;The bomb calorimeter test, although effective, is no longer used when determining calories in food. In 1990, when the U.S. Food and Drug Administration (FDA) rewrote the rules of food labels, it also allowed for an aggregate system of measure, called the Atwater system, which calculates calories based on the nutrients in the energy providing components of the food. The Atwater system is more cost effective, but, in some ways, less accurate because the results may or may not include non-digestible components of food, such as fiber, in the calorie count.&lt;/p&gt;
&lt;h2&gt;What are macros?&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.sanity.io/images/5pnyimif/production/20957af8d5adbf370edda3e086cc22ed4fbd26a0-988x689.webp?w=600&quot; alt=&quot;undefined&quot;&gt;&lt;/p&gt;
&lt;p&gt;The Atwater system works by using math to add up the total calories in the nutritional components of food. These components are called macronutrients, or macros for short. There are four categories of macros: carbohydrates (carbs), fats, protein and alcohol. On a food label you’ll see total calories, and a breakdown of those calories by macros, which have standard measurements. Within each macro category there may be different kinds of fats or proteins, etc, but each category has the same amount of calories per gram, and break down like this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1 gram of carbs has 4 Calories&lt;/li&gt;
&lt;li&gt;1 gram of fat has 9 Calories&lt;/li&gt;
&lt;li&gt;1 gram of protein has 4 Calories&lt;/li&gt;
&lt;li&gt;1 gram of alcohol has 7 Calories&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Using these values, a producer can measure, in grams, the different macros a product contains and calculate the total calories. Let’s consider a food item that has 11 grams of fat, 26 grams of carbs, and 3 grams of protein in a single serving. If we do the math, that means it has 213 Calories. Of course the total calories you get might not match the label because labels give values in whole numbers, not decimals, but, overall, if you are close to the label, the label is mostly fairly accurate.&lt;/p&gt;
&lt;p&gt;It’s an effective system for standardizing both the measurement and presentation of nutritional information, and for tracking nutrition and fitness. In fact, we’ve become used to it, and are all, in one way or another, familiar with both calories and macros. Except, that is, for alcohol.&lt;/p&gt;
&lt;h2&gt;Alcohol is a macro&lt;/h2&gt;
&lt;p&gt;There’s no alcohol in food, so why put it on the label? You can find nutritional information on a can of soda pop, but not on a bottle of beer. Some alcoholic beverage producers have started putting nutritional information on their containers, but they are in the minority. The FDA does not require nutritional labels on alcoholic beverages, so we’re left wondering where does the alcohol macro fit in a nutrition plan? The answer is that it fits the same way as the other 3 macros, but we don’t often track it among them. However, that doesn’t mean there is no impact, or that they can be hidden in other metrics. Alcohol is a macro, and we have to deal with it.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.sanity.io/images/5pnyimif/production/83708907099c48c910176ffcb10570662a3f221b-450x162.webp?w=600&quot; alt=&quot;undefined&quot;&gt;&lt;/p&gt;
&lt;p&gt;Unlike carbs, fat, or protein, alcohol depends on just how alcoholic it is. The 7 calories per 1 gram of alcohol applies to 1 gram of pure alcohol, so for us to figure out the calories we get from alcohol in a beverage, we must know how much of that beverage is alcohol by volume (ABV). If we have an ounce of vodka, and we know the vodka is 40% ABV, we can calculate the calories in the alcohol by first calculating the mass of the vodka. You can calculate the mass of the vodka using this formula, knowing that the density of alcohol is 0.79 grams per milliliter, and the density of water, the remaining part of the vodka disregarding any flavoring agents, is 1 gram per milliliter:&lt;/p&gt;
&lt;p&gt;x = milliliters of 40% ABV vodka&lt;/p&gt;
&lt;p&gt;y = mass&lt;/p&gt;
&lt;p&gt;0.6x + 0.4(0.79x) = y grams&lt;/p&gt;
&lt;p&gt;Breaking it down, 0.6x is the 60% water, and 0.4(0.79x) is the 40% alcohol. Working through the problem, we first convert to metric, 1 fluid ounce of vodka is also 30 milliliters of vodka, then apply the formula and know that we have 18 grams of water, and 9.5 grams of alcohol. If we then take the mass of the alcohol, 9.5 grams, and multiply by 7 we find that one ounce of 40% ABV vodka has 66 Calories, at least for the 40% that is alcohol, not the other 60% of water and stuff in the drink.&lt;/p&gt;
&lt;h2&gt;The calories of components&lt;/h2&gt;
&lt;p&gt;One can open a web browser and search for calories in cocktails and find any number of pages and sites that list a variety of drinks, and the calories in them. If you do this, select about six or so and compare them, finding, even if they have some of the same cocktails, their numbers differ greatly. Sure, they’re likely accurate, but you need the recipe and ingredient list, at least, to verify them. A better resource comes from the National Institutes of Health, U.S. Department of Health and Human Services (NIH) who’ve created an &lt;a href=&quot;https://www.rethinkingdrinking.niaaa.nih.gov/tools/calculators/calorie-calculator.aspx&quot;&gt;online calorie tool&lt;/a&gt; for alcoholic beverages. It’s a little more helpful, but still leaves alot of guesswork, especially when it comes to cocktails.&lt;/p&gt;
&lt;p&gt;Remember that calculation we did to find the calories in an ounce of vodka? We came up with 66 Calories, but the NIH tool indicates 97 Calories for 1 1/2 ounces of 40% ABV vodka. Close enough. We come up with 96 when using our calculations, but the 1 Calorie difference accounts for latitude in our conversion (1 ounce isn’t exactly 30 milliliters), and rounding the results to whole numbers (the real result you get with the above formula, which you also got if you’re working along, is 66.36, which, adding half and rounding for the ounce and a half used by the NIH, is 97).&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.sanity.io/images/5pnyimif/production/55afc88a6e082688b01b1c07bc363461b2050a84-600x750.webp?w=600&quot; alt=&quot;undefined&quot;&gt;&lt;/p&gt;
&lt;p&gt;While the NIH data may get us closer, it’s still no good. One cannot say that every 40% ABV gin has the same number of calories, just as one cannot say that the calorie count in one brand of 40% ABV gin is the same as every 40% ABV whiskey, and so forth. We can only say those values are true for the 40% that is alcohol. A more granular measurement is needed. For spirits, we must assess calories based not only on the percentage of alcohol, but on the other ingredients and additives.&lt;/p&gt;
&lt;p&gt;Consider rum. According to NIH, all 40% ABV rum, just like all 40% ABV gin, and all 40% ABV whiskey, etc. is 97 Calories. Fair enough for the alcohol, but what about anything else added to the rum, such as sugar? One has to know how much sugar is in the rum, and, while the practice of adding sugar to rum is accepted, not all producers do it, and those that do add different quantities by mass. That’s not something we can figure out simply with a calculator, we’d have to find a way to measure the sugar. Sure, the sugar in a beverage can be measured, but in a world of natural sugars, i.e. the ones already in the liquor, and the possibility of added sugar, and maybe other things, that 97 Calories really only works for the cleanest sample of vodka.&lt;/p&gt;
&lt;p&gt;Aging adds other characteristics, and ingredients, even if in trace amounts and not all of which will contribute calories. If that’s not enough, we wander into a dark forest indeed when we consider other things, like liqueur, and non-alcoholic ingredients. If you’re using fruit juice, or syrups that you made and know are just sugar and water, you can find the calories pretty easily, but not so with liqueur. They can be calorie bombs if they’re sweet enough, or creamy enough such as with Irish cream, but you’ll never know exactly what, and how much because there is no nutritional information, or ingredient lists on alcoholic beverages.&lt;/p&gt;
&lt;h2&gt;Alcohol and the body&lt;/h2&gt;
&lt;p&gt;The human body considers alcohol as a poison, and will eliminate it from the system as quickly as possible. The more alcohol you ingest, and the faster you ingest it, the more difficult it is for the body to expel it. We’ve already seen how murky it can be when calculating the calories in an alcoholic beverage, but it gets worse as you account for percentage ingested over time.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.sanity.io/images/5pnyimif/production/cd88ebe8392d584e1261a28f654ee712f6dc2956-1000x563.webp?w=600&quot; alt=&quot;undefined&quot;&gt;&lt;span class=&quot;caption&quot;&gt;Photo by Yoab Anderson on Unsplash&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Since the body disposes the alcohol, you might not get the same amount of calories you calculated. If you drink less alcohol, and/or drink slower, the body deals with it more efficiently, and some calories flow away with the waste, but drink too much too quickly, and your body can’t handle it. In that case you might get drunk, but you’ll also make full use of the calories on offer. Of course, this only applies to the alcohol, so don’t count on pouring a Pina Colada short and hoping to lose weight. At almost 500 Calories, with nearly 400 of them from the Coco Lopez and pineapple, you’re still, for all intent and purpose, consuming a small meal.&lt;/p&gt;
&lt;p&gt;Also consider metabolic rate, and how well the body digests things in the first place. We already know the Atwater system of calculating calories in food is not as efficient as the bomb calorimeter, but that’s totally OK, because all we can hope for, in the end, is a ballpark figure. Accurate figures require knowing not only how many calories are in a food item, but how well a given consumer of that item can access those calories. This, in a sense, is effective calories, and every person is different, so, no matter how accurate the label is, or how carefully you measured and calculated the calories in your drink, it’s still just an informed guess when applied to each one of us individually.&lt;/p&gt;
&lt;h2&gt;Putting it all together&lt;/h2&gt;
&lt;p&gt;Saying this, that, or the other cocktail has X Calories in it is a fool’s errand. Every bar pours differently, spirits are not all the same, ABV numbers are never nice, round, and tidy, the ingredients are unknown, and quantities, except when you poured it, are only assumed. We’re much better off dealing with the component ingredients, then adding it all up. Looking up the calories in fresh juice is easy enough, and bottled juice will have information on the label, but spirits won’t, so we need a way to make reasonable estimates.&lt;/p&gt;
&lt;p&gt;The best way to do this is by making everything yourself. No, we don’t mean distill your own gin, but we do mean squeeze your own juice, make your own syrups, and buy what you can’t make from reputable producers. You don’t have to, but if you make that Gimlet with homemade lime cordial, not only did you use real sugar and fresh lime, but you know how much of each you used, and, therefore, how many calories. On the other hand, if you’re using Rose’s Lime Juice you’re ingesting mostly high fructose corn syrup, and we’ve all had enough of that. If you like Rose’s, go for it, but, if you’re concerned about what you’re putting in your body, both in terms of calories and quality ingredients, make your own.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.sanity.io/images/5pnyimif/production/4167ffcd62284349d303176fc1a13608c7c6f4f2-600x750.webp?w=600&quot; alt=&quot;undefined&quot;&gt;&lt;/p&gt;
&lt;p&gt;As for spirits, buy local. If you care about the consumables you ingest, you’re likely not going bottom shelf at the liquor store, and, even if you do, you can still shop intelligently. But, while you may spend more on better quality spirits, you can still only estimate what’s in them. Buying local is your best bet for more accurate estimates, because, in most cases, if you are diligent and polite, you can go to a tasting room, talk to the people who made the liquor and get a sense of how they treat it, what they put in it, and the quality of the materials from which the spirit was made.&lt;/p&gt;
&lt;p&gt;In the end, until the FDA mandates nutritional labels on alcoholic beverages, we’ll never really know. We can, however, follow one simple rule of thumb: save the cocktails with lots of cream and/or sweeteners, like the Pina Colada, for special occasions, not every day, and treat the rest as candy. When you stop for a drink after work, and thoroughly enjoy the Cosmopolitan you ordered, consider it in the same way you would a Snickers bar. If you would eat a second Snickers bar, go ahead, have another Cosmo, but remember, in either case, both choices often precede a meal, both choices contribute calories, and all calories matter, especially the ones from things, like booze and candy, that don’t fill you up, the so called empty calories. So next time you’re tracking macros, don’t forget the alcohol, then drink healthy and local, just like you eat.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Blue Monday</title>
    <summary>A classic vodka cocktail that&#39;s as old as it is blue. But what makes it blue? Let&#39;s explore blue curacao, where it comes from, what it tastes like, and why it&#39;s blue.</summary>
    <link href="https://www.tonympdx.com/blog/post/blue-monday"/>
    <updated>2021-05-30T22:32:00.000Z</updated>
    <id>https://www.tonympdx.com/blog/post/blue-monday</id>
    <content xml:lang="en" type="html">&lt;p&gt;Blue drinks are the happy meals of the cocktail world. No matter what’s in it, if it’s blue it’s automatically better, and way more fun. Bright blue drinks, however, are not restricted to that moment of the 20th century where everything was both big and blue and sweet and served in a hurricane glass with crushed ice. Make no mistake, 1970s kitsch drinks can be spectacular if you invest the time to craft them well, but sometimes you want an old-school stirred drink that’s both high proof and as blue as anything that comes with pineapples and a straw.&lt;/p&gt;
&lt;p&gt;The Blue Monday is older than you think. It’s originally a recipe created, or at least documented, by Harry Craddock and recorded in the Savoy Cocktail Book from the 1930s. Surprisingly, it’s not only blue but a vodka cocktail, something rare at the time. Vodka in the U.S., when Craddock worked the bar, was really only known in Eastern European communities, and the few cocktail recipes we have from then are of those communities. Places like the Russian Tea Room, which served alcohol in the years leading up to prohibition, would offer vodka, but not many other places. The Blue Monday, at least, is proof that vodka could be found and could be enjoyed and wasn’t just for those with a taste for home.&lt;/p&gt;
&lt;p&gt;But it’s blue! How did Craddock make it blue? Blue Curacao was totally a thing, being sold by Bols as creme de Ciel, cream of the sky, but Craddock instead used Cointreau and blue vegetable extract. Wrinkle your nose all you want, blue vegetable extract is just food coloring, only from a vegetable, not a test tube. Craddock’s Blue Monday, then, is vodka, Cointreau, and the blue vegetable stuff. Why not just use blue curacao? Perhaps Craddock was just set on using Cointreau, and who can argue? As far as orange liqueur goes, Cointreau is as good as they come.&lt;/p&gt;
&lt;p&gt;The downside to Cointreau is that it’s not blue. Some would say that’s an upside, but why is some curacao blue, anyway? It all goes back to Lucas Bols. Curacao, a liqueur made from the peels of a bitter variety of orange native to Curacao, the laraha, has been around at least since the Dutch West Indies Company conquered and occupied the island in 1634. Bols, who held shares in the Dutch West Indies Company, took full advantage of the ill-gotten bounty as a low-cost source of spices for their distilled products. Finding that the peel of the bitter, inedible laraha held wondrous aromatic oils, he developed a product that is today the direct ancestor of curacao. Is it curacao? Who knows, but it was an orange liqueur made from the same stuff that flavors Cointreau, so, one can say Bols created curacao. Probably.&lt;/p&gt;
&lt;p&gt;The Bols family of Amsterdam first opened their distillery, t Lootsje, in 1575. When Lucas Bols came along in the late 1600s and presided over the families holdings during the golden age of Dutch colonial power, his significant holdings in the Dutch West Indies Company gave him access to the ingredients needed to expand the business and try his hand at new products, one of those being his new orange liqueur that was, surprisingly, blue. When asked why Bols stated only that he added an “element of alchemical mystery” to the product. Smoke and mirrors aside, he added color, but, more interestingly, is why, and why blue?&lt;/p&gt;
&lt;p&gt;We may never know for sure, but Bols Blue Curacao is still a thing. It’s no longer sold as creme de Ciel, but it is still sold. The blue color itself is an additive called E133 Brilliant Blue, and definitely not what Lucas Bols would have used at the turn of the 18th century. Brilliant Blue is a synthetic dye produced by doing tricky stuff to things with very long and complicated names and found in many foods, not just curacao. Have you ever had a blue Jolly Rancher? Brilliant Blue. Is it bad? You be the judge. It’s an organic compound but produced in a lab. It’s also approved for use in food in both the U.S. and EU, is poorly absorbed by the human body, and really only exists to make things that aren’t blue, blue. If you want to avoid it, you can make the Blue Monday without blue curacao and it would objectively taste the same, but, really, we all know better.&lt;/p&gt;
&lt;p&gt;Craddock, however, chose Cointreau, which is clear, so he had to add the vegetable color. It’s baffling that he would make the effort to color the Blue Monday at all but blue makes everything better, and a blue cocktail tastes better because it’s more of an occasion. It’s a party in your glass, but the color doesn’t suggest the taste of orange. It does now because we know blue curacao tastes like orange, but you would no more know that than if you looked at a Circus Peanut candy and thought no way will that orange peanut-looking thing taste like banana, yet it does.&lt;/p&gt;
&lt;p&gt;So, while grooving on the bright blue bottle of orange, and noting irrelevantly that Craddock never stirred a cocktail, everything in the Savoy book is shaken, even the Martini and this sidestep from it, let’s look at the recipe. Favor Dale DeGroff’s version because it uses blue curacao instead of vegetable dye, and Cointreau which keeps it loyal to the original. Also, stir, because look at it. A martini might be passable if it’s cloudy from shaking, and that’s OK, it will clear up, but a Blue Monday should be crystal clear and sparkling blue when served up. A cloudy Blue Monday would be an overcast day in a coupe, so grab a bottle of vodka, and stir up a powerful, high-proof classic for the inner child in all of us, then garnish with some kumquats, which you can play with and eat because what’s a happy meal without a toy?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1 1/2 oz Vodka&lt;/li&gt;
&lt;li&gt;1/2 oz Cointreau&lt;/li&gt;
&lt;li&gt;1/4 oz Bols Blue Curacao&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Stir with ice and serve up. Garnish with kumquats or a flamed orange peel.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Fair and Warmer</title>
    <summary>Is this cocktail named for a play or not? The Fair and Warmer is a mysterious cocktail from a famous book that may or may not be about a popular play.</summary>
    <link href="https://www.tonympdx.com/blog/post/fair-and-warmer"/>
    <updated>2021-05-09T22:47:00.000Z</updated>
    <id>https://www.tonympdx.com/blog/post/fair-and-warmer</id>
    <content xml:lang="en" type="html">&lt;p&gt;Somewhere in here is a story about connections. There&#39;s also a story about an unexpected cocktail with an odd name, Fair and Warmer, that saw a moment in the limelight just about the time of a popular play of the same name.&lt;/p&gt;
&lt;p&gt;It&#39;s not unusual for movies or plays, especially those of note, to have a cocktail named after them, or their characters, or associated similarly in some way. Blood and Sand is one example among many, as are the many cocktails named for movie stars. Sometimes it goes the other way. Tequila Sunrise is a movie named after a drink, and one could argue that The Big Lebowski could work just as well if it were named The White Russian.&lt;/p&gt;
&lt;p&gt;The Fair and Warmer cocktail might be one of these, but the history is murky. The recipe, so far as is known, comes from one Harry Craddock, a subject of the crown living and working in New York before prohibition. His pre-Prohibition resume includes bartending at both the Knickerbocker Club, and the Hoffman House. In 1920 he returned to the UK and began his most famous gig at London&#39;s Savoy Hotel serving fancy American drinks to Europe&#39;s leisure class, but it&#39;s his time in New York that&#39;s of interest to the story of the Fair and Warmer.&lt;/p&gt;
&lt;p&gt;Although hailing from the UK, Craddock became an American citizen and avoided most of the First World War until serving with US forces in 1918. Before and after his service he worked at several hotels and establishments of note, and being a young publicity hound employed among the New York nightlife, he would have had access to Broadway and various forms of entertainment such as a farce called Fair and Warmer.&lt;/p&gt;
&lt;p&gt;Fair and Warmer was the hit play of 1915, a three-act story about 2 friends, Laura and Jack, who like late nights and parties, and their respective spouses who don&#39;t. The dull spouses find themselves together and mix, then drink, a cocktail beyond their sensibilities, and both characters are sent straight to sleep. Laura and Jack, knowing nothing of the short night and long snooze, assume misdeeds and mayhem ensues. Eventually, the maid sets the irate spouses straight because in the movies and on stage maids get actively involved in their employer’s lives. Fair and Warmer ran for 377 performances, and, in 1919 was made into a movie that also was a hit.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.sanity.io/images/5pnyimif/production/55c5f8ac8208b17f3424f8669430b30463689bcd-525x720.jpg?w=600&quot; alt=&quot;undefined&quot;&gt;&lt;/p&gt;
&lt;p&gt;In 1930, Craddock published his cocktail book, the renowned and famous Savoy Cocktail Book, full of minuscule portions of strange ingredients, and recipes for drinks we recognize by name, but would hardly know from the notes. The virtue of Craddock&#39;s book is as a historical document, for he famously collected classic recipes, invented new ones, and kept copious notes. There&#39;s scant evidence of the Fair and Warmer before Craddock&#39;s book, and it&#39;s a hard find in any of the contemporary or subsequent volumes. Is the Fair and Warmer a Craddock original? It&#39;s hard to tell. At the time, it wasn&#39;t common for an author to claim or give credit for a particular drink, they just were, and if you made a new one, then it just was. Credit and celebrity is a modern thing, and often fraught with assumptions when supporting historical records with definitive evidence remains absent. Such is the case of the Fair and Warmer. There&#39;s no identifiable empirical data to say that Craddock created this drink for, or named it after, the play or the movie, but the circumstantial evidence does support the argument that the names are the same. Craddock was employed, young and loose in New York at the time of the hit play, with the means and ability to create a drink named after it, the publicity skill to promote it, the foresight to write it down, and, later, the gumption to publish it. As far as cocktail histories go, it&#39;s a great story, just like most of them.&lt;/p&gt;
&lt;p&gt;So what is it? Another interesting recipe, the Fair and Warmer is rum, vermouth, and curacao. Not exactly the kind of cocktail you think of when you think of rum, but it works. Craddock does specify Bacardi Rum, which was made in Cuba at the time, and although not the same as modern Bacardi, it was and is still a light rum. What is a light rum? Just that. It&#39;s a bit self-defeating trying to classify or understand any of the non-standard ways of describing rum (there are no standard ways like there are for whiskey or gin) but what the Fair and Warmer wants is something clear, not too funky, and not too assertive. Delicate rum is in order, and you totally could use Bacardi, or your favorite clear, light rum.&lt;/p&gt;
&lt;p&gt;In the usual way of old cocktail recipes, the portions of each ingredient seem almost random. The bartenders of the time did indeed know what they were doing but were working with spirits of the day for both good and bad. Bacardi would have been one of the more respectable choices, but given available ingredients and the popular tastes of the time, it would make sense that the ratios might not work for modern drinkers and modern spirits. No worries. We simply roll with it, use standard measures and mix a drink. Is it a theater cocktail? Who knows, but it could be, and, as far as cocktail naming goes, you could do worse than naming it after a hit play or movie. At least you&#39;d get a loyal fanbase for a moment, as did the Fair and Warmer. Or so one assumes.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1 1/2 oz Bacardi rum&lt;/li&gt;
&lt;li&gt;1/2 oz Sweet vermouth&lt;/li&gt;
&lt;li&gt;1/4 oz Cointreau&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Stir and serve up. Garnish with an orange twist.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Bunny Mother</title>
    <summary>A cocktail from the Playboy Club, and the magazine that inspired it. It’s also a critique of both Boomer culture and the 1970s in general, but an acknowledgment of the greatest cocktail book of all time, the Playboy Host and Bar Book. Probably.</summary>
    <link href="https://www.tonympdx.com/blog/post/bunny-mother"/>
    <updated>2021-03-28T01:21:00.000Z</updated>
    <id>https://www.tonympdx.com/blog/post/bunny-mother</id>
    <content xml:lang="en" type="html">&lt;p&gt;The 1970s was a time of big things, big cars, big lapels, big movies and big drinks. The huge, colorful, garish cocktails full of fruit, sugar and vodka still exemplify the single’s lifestyle entering the last quarter of the century. One can’t think of a drink like the Harvey Wallbanger without imagining leisure suits, bell bottoms, knit dresses, and an odd sense of self declared sophistication amid a sea of polyester and vinyl. Such is also the case with the Bunny Mother, a cocktail from the San Francisco outpost of the Playboy Club, destination of choice for the jet set and the fabulous, or so you’d believe. It can’t be said that Playboy created the Space Age Bachelor vibe, or its 70s wood paneled adjunct, but they sure did commercialize the template, refine the fantasy, and sell it all in neatly packaged plain brown wrappers.&lt;/p&gt;
&lt;p&gt;Playboy was a magazine like no other. There were men’s magazines in 1953, some, like Esquire, full of every day content for the modern man, and others, like the kind you’d find for sale at the liquor store which were all full of pictures. You couldn’t have both. Sure, you could find pinup illustrations in Esquire and every magazine of the day, but the photo books you had to ask for, and there wasn’t much else in them because there didn’t have to be. No one who ever bought a copy of Swank bought it looking for recipes. Hugh Hefner noticed this and put it all together in a magazine built on the idea of quality content for men. Playboy would have superb writing, would cover all topics from movies to music to culture to fashion, and, the part everyone thinks of first, pinup pictures.&lt;/p&gt;
&lt;p&gt;The man who reads Playboy, according to Hefner, is every man. Hefner saw Playboy as an urban lifestyle magazine and the urban lifestyle had alot going for it. Playboy eventually became the playbook for the modern bachelor, full of intellectual essays, contemporary and now classic literature, the latest trends in fashion, the fastest cars, and all the women. You could learn stuff from Playboy, such as how to buy the best hi-fi, how to recognize quality shoes, or how to make the finest drinks. What wine goes with fondue? Check Playboy. There was even a TV show, Playboy After Hours, where you could see it all in action in an hour long showcase of jazz music, beautiful women, and intellectual discourse with learned guests. It was the jet set fantasy of the 1960s echoed and sold in the pages of the magazine and you could join in, too, at any of the now many Playboy Clubs. And what do you drink while listening to Bitches Brew and discussing the works of Cheever, Roth and Vonnegut? Those same garish cocktails with lots of orange juice in funny looking glasses. You do have a copy of Playboy’s Host and Bar Book, don’t you? By the time the 70s rolled around Playboy was a script for every material fantasy, a media powerhouse at its zenith, and an established part of the cultural landscape.&lt;/p&gt;
&lt;p&gt;One could make a case that the lounge culture of the 70s was Modernism’s denouement. Playboy, one of its beacons, began fading at the beginning of 1972, never again regaining its stature among the magazines, eclipsed by more explicit and sexually focused competitors, left behind as readers grew up, acquired families, responsibilities, and split level homes. Hefner’s view of sophisticated urban bachelorhood fell before an onslaught of recession, gas shortages, hostages, suburban sprawl and the approaching greed of the 1980s, but for a moment, we had the Playboy Clubs, the plastic, prepackaged lifestyle destinations where anyone could play at being marvelous. In the end, it was all a fantasy, created and sold by movie studios, novelists, and a mass media looking for the next demographic, Bob and Carol and Ted and Alice, the Baby Boomer, the relic of the last American generation to do better in life than their parents, and who would, later in life, adorn their RVs with bumper stickers proudly announcing, “I’m spending my kid’s inheritance.”&lt;/p&gt;
&lt;p&gt;This is what drinks like the Bunny Mother are all about. They are the faux-fabulous accouterments of the lifestyle fantasy that not even Hugh Hefner could maintain. Over the years, Hefner’s star fell along with the fortunes of his creation, a magazine of a bygone era for a generation that is relevant no more. Yet no one noticed. While Hefner spent month after month publishing superior quality content, and opining the leisure suit as a lost cultural marker, Generation X was busy building the Internet, the final hammer blow to a, by then, hollow empire, itself another bit of kitsch, a relic of a lost age.&lt;/p&gt;
&lt;p&gt;So what about the drink? It’s a Screwdriver with some other stuff in it. Isn’t that what all those drinks were? Vodka, orange juice, and crayons? Make no mistake, we love kitsch drinks, especially the big colorful ones, but we love them for their kitsch value, for what we can do with them, and for what we can make of them if we pour them with quality and care, sort of like imagining Hugh Hefner looking at men’s magazines in 1953 and saying, “it should be better than this,” and then, for a moment, it is.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1 1/4 oz Vodka&lt;/li&gt;
&lt;li&gt;1 oz Orange juice&lt;/li&gt;
&lt;li&gt;1 oz Lemon juice&lt;/li&gt;
&lt;li&gt;1/4 oz Simple syrup&lt;/li&gt;
&lt;li&gt;1/4 oz Grenadine&lt;/li&gt;
&lt;li&gt;1/4 oz Cointreau&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Shake everything except the Cointreau with ice, and strain into an ice filled collins glass. Float the Cointreau on top. Garnish with an orange slice and a cherry.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Fish House Punch</title>
    <summary>Legend says that Fish House Punch put George Washington out of commission for three days. How is that possible? This is a story of taxes, molasses, rebellion, and rum.</summary>
    <link href="https://www.tonympdx.com/blog/post/fish-house-punch"/>
    <updated>2021-03-20T18:15:00.000Z</updated>
    <id>https://www.tonympdx.com/blog/post/fish-house-punch</id>
    <content xml:lang="en" type="html">&lt;p&gt;Fish House Punch is older than the United States of America. Many recipes and adjustments later, it’s still a great Summer drink, or, served warm and mulled, a comforting companion on cold Winter nights. Even though punch is often served in a bowl for a crowd, there’s no rule that says you can’t mix just one glass.&lt;/p&gt;
&lt;p&gt;The beverage in question originally hails from the State in Schuylkill (it’s pronounced SKOO-kuhl) Fishing Company, also known as the Fish House, in 1730s Philadelphia. The State in Schuylkill was (and is?) a weird ‘sovereign’ nation in Pennsylvania whose members call themselves ‘citizens.’ Think British East India Company, or the Hudson Bay Company. The tradition of the Fish House, however, is one of rebellion. In colonial America, the British were not popular, so colonists organized themselves in groups far from King and Crown, and were mostly left alone. Citizens of the State in Schuylkill would fish and drink punch. Of course all things came to a head because the Brits liked taxes and the future Americans didn’t.&lt;/p&gt;
&lt;p&gt;It wasn’t the taxes of the Boston Tea Party that lit the fuse of revolution, although it didn’t help. The tax that first angered the colonists was the Molasses Act of 1733 in which the British placed a tax on sugar and molasses imported from non British nations because what’s made from molasses? Yes, rum. Who else was making rum? The colonists because, why buy from the English what you can make yourself? You see, the English ran their colonies, and later their empire like a gang of thugs. One of their ridiculous laws prevented colonists from buying rum from anyone but the English, and when the colonists said no, making their own rum instead, the English passed another law prohibiting the purchase of sugar and molasses from anyone but the English. That didn’t work, either, so the taxes came. Yet the colonists still kept making rum, and what’s made with rum? Lots of things, including Fish House Punch.&lt;/p&gt;
&lt;p&gt;1733, some historians would argue, was a tipping point in the colonies, and the eventual result was war and independence. George Washington, as with all Americans, enjoyed a drink, and was quite fond of Fish House Punch. Oral history contends that Washington, one post revolutionary evening, raised 13 victory toasts, one for each colony, now state, and subsequently found diary entries beyond his ability for 3 days. True enough that Washington would have toasted victory, but was it hangover that kept the general from writing, or could it have been that he had just won a difficult war against the most powerful military in the world and wanted a rest? We’ll never know, but we do know Washington did, indeed, drink Fish House Punch, and we also do know that Fish House Punch is a powerful cocktail. So maybe it was a hangover after all.&lt;/p&gt;
&lt;p&gt;Whatever afflictions befell the general, self inflicted or not, Fish House Punch is an exceptionally easy drink, and still popular today. We don’t often enjoy drinks with two or more base spirits, but Fish House Punch, with both rum and cognac, is a rare exception. The difference here is, not only proper selection of both rum and brandy, but the addition of peach liqueur, which acts as the unifying ingredient. The peach sort of makes everyone play nice together and it works, as America’s first president apparently found out.&lt;/p&gt;
&lt;p&gt;So how do you make it? That depends on the recipe, this one comes from Death and Co., and favors Jamaican rum and cognac. Peach liqueur is the unifying ingredient and the lemon juice and soda make it more like a spiked lemonade than anything else. In the end, Fish House Punch is a cocktail (or a punch) that’s stood the test of time for almost 300 years. I think we can drink to that.&lt;/p&gt;
&lt;p&gt;2 oz Cold soda&lt;br&gt;
3/4 oz Rum&lt;br&gt;
3/4 oz Cognac&lt;br&gt;
3/4 oz Peach liqueur&lt;br&gt;
3/4 oz Lemon juice&lt;br&gt;
1/4 oz Simple syrup&lt;br&gt;
1 strip Lemon peel&lt;/p&gt;
&lt;p&gt;Pour the soda into a goblet or collins glass. Short shake the remaining ingredients (about a 5 second shake with ice should do) and add to the glass with the soda. Add ice, and garnish with a lemon wheel, and, optionally, fresh grated nutmeg.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Jack Rose</title>
    <summary>The Jack Rose is a classic cocktail loved by many, including Hemingway himself. That&#39;s not saying much, is it? The Jack Rose is a good drink, but what about Hemingway?</summary>
    <link href="https://www.tonympdx.com/blog/post/jack-rose"/>
    <updated>2021-02-06T22:13:00.000Z</updated>
    <id>https://www.tonympdx.com/blog/post/jack-rose</id>
    <content xml:lang="en" type="html">&lt;p&gt;Let&#39;s talk in hushed tones and admit something to ourselves in spite of what all the college professors, high school teachers, editors, bosses and mentors will say. In spite of all the academic reading lists, Cliffs Notes, literary compendiums, text books and self absorbed high brow magazines, we know what they also know, but won&#39;t admit. Ernest Hemingway&#39;s books aren&#39;t that good. It doesn&#39;t matter because Hemingway himself lived so much larger than life that we read his work almost as a footnote to the not quite excessive level of stories and legend that surrounds him. His work is almost ancillary, so if we&#39;re not reading Hemingway for the literary value, why read Hemingway at all? For the drink. Hemingway liked to drink, and he liked to write about drink.&lt;/p&gt;
&lt;p&gt;The Sun Also Rises is a book most likely inspired by one of the author&#39;s many adventures, and is as tersely written as anything else he published, but Hemingway could capture reality, or his version of it. A journalist by craft in a day when stories were filed over a telegraph, he developed his style out of necessity. Economy of words was more important than expository quality, and Hemingway became celebrated not for his prose but for his lack of it. To the modern reader, it shows, like a bad status post, or the modern version of reporting done in 140...er...280 characters or less. Hemingway wrote like he wrote, well within the confines and finances of early 20th century technical advancement. His publishers were not going to pay for flowery prose in an age when each character cost money and time, tapped out ditty bop on a wireless telegraph by a Western Union clerk, especially when filed from exotic foreign lands.&lt;/p&gt;
&lt;p&gt;The Jack Rose made an appearance in The Sun Also Rises, most likely inspired by the author&#39;s vices. A practicing drunk by hobby and lifestyle, Hemingway also knew what to drink, or how to drink, or, does his legend do him justice? The image of the sloppy drunk is well established, bumbling, stumbling, unshaven and poorly dressed in an ill fitting outfit reaching for whatever is available. It doesn&#39;t add up. Hemingway achieved a great deal before ending life by his own hand in a moment of questionable sobriety, so how do we reconcile that with the Hemingway of legend? Could it be, perhaps, that Hemingway&#39;s knowledge and appreciation for a fine cocktail, along with broad tastes and pleasures founded on curiosity and exploration lead us to think he consumed more than one would consider healthy? Of course, but only by virtue of his chosen career, and the archetypes assigned to the sour and jaded reporter, especially at a time of grandiose prose and self satire from the likes of old school journalists like H. L. Mencken and, on the other side of that coin, scalding, impenetrable, and still relevant critique from American realists like Theodore Dreiser.&lt;/p&gt;
&lt;p&gt;Hemingway, on paper, was a world away from realism. Hemingway was a modernist before modernism was a thing. Hemingway was the voice of his generation, the Lost Generation, a generation as missing as Generation X, who, nearly 80 years later would embrace the postmodernist literary figure and find in contemporary works and criticisms the same emptiness and patina that surrounded Hemingway&#39;s attempt, along with so many ex-pats in post war Paris, to explain a rapidly changing world in the wake of so much meaningless hyper activity.&lt;/p&gt;
&lt;p&gt;Those cocktails, the few details Hemingway allowed himself in the terse age of telegraph taps are, perhaps, his reality. The grounding upon which he managed to observe each and every day through the lens of the curious rather than the critic, and who, instead of losing himself in the political and social upheaval of the time, chose to find himself in adventure and indulgence, seeing and experiencing the world on its terms, never far from nature&#39;s embrace.&lt;/p&gt;
&lt;p&gt;The Jack Rose was part of it all, as were so many drinks that litter both novel and legend, all of which one can assume were thoroughly researched, just as researched as a climb up Kilimanjaro for no reason other than to see what it was like, and to catch the view from the top. To that end, Hemingway was very much of his time, but his legacy proves that, creatively, he was very much ahead of his time. Except his books just aren&#39;t that good, but now we know it&#39;s totally OK.&lt;/p&gt;
&lt;p&gt;2 oz Applejack&lt;/p&gt;
&lt;p&gt;3/4 oz Lime juice&lt;/p&gt;
&lt;p&gt;1/2 oz Grenadine&lt;/p&gt;
&lt;p&gt;Shake with ice and serve up.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Fluffy Ruffles</title>
    <summary>Fabulous and modern in 1907, a story and a cocktail for a comic strip, or a play.</summary>
    <link href="https://www.tonympdx.com/blog/post/fluffy-ruffles"/>
    <updated>2021-01-30T22:18:00.000Z</updated>
    <id>https://www.tonympdx.com/blog/post/fluffy-ruffles</id>
    <content xml:lang="en" type="html">&lt;p&gt;There&#39;s no shortage of classic cocktails connected to pop culture, and the Fluffy Ruffles is just one among many. It&#39;s a simple drink, just rum and vermouth, but there&#39;s so much more to it. Seemingly named for the ruffles and pleats around the bottom of a fancy dress, the Fluffy Ruffles was actually named for a 1907 comic strip character of the same name. Then again, maybe it was named for the Broadway play based on the comic.&lt;/p&gt;
&lt;p&gt;Movie and show producers often name cocktails after the latest production, and it&#39;s no different with the Fluffy Ruffles. Probably. Mystery aside, the Fluffy Ruffles appears in Harry Craddock&#39;s &lt;em&gt;Savoy Cocktail Book&lt;/em&gt;, but is certainly not Craddock&#39;s creation. It was a known cocktail at the time, having also shown up in a 1917 publication, &lt;em&gt;Recipes for Mixed Drinks&lt;/em&gt;, about 10 years after the popularity of both comic and play. Let’s go with speculation and assume, with fair faith, that it was likely also known in 1917. Cocktails, or anything named for popular stuff isn&#39;t so named 10 years after the fact.&lt;/p&gt;
&lt;p&gt;Fluffy Ruffles was a sensation for a brief time in 1907 and 1908, a flash in the pan maybe, but an important one. Created by poet and writer, Carolyn Wells, Fluffy&#39;s story was told in verse under the full page illustrations of Wallace Morgan and published in the New York Herald. The strip was a huge hit right from the start, and for all of 1907 her story played out week after week in full color.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.sanity.io/images/5pnyimif/production/34635b6f02670d152488114a8b87074edf448baa-733x1000.webp?w=600&quot; alt=&quot;undefined&quot;&gt;&lt;/p&gt;
&lt;p&gt;Fluffy Ruffles was printed in color, in 1907. Not only that, Fluffy Ruffles was the first serial comic. There have been plenty since then, but the story of Fluffy&#39;s life and antics was the first. The idea of a female protagonist in the media wasn&#39;t new, the Gibson Girl was, by Fluffy&#39;s time, well established, but, unlike the Gibson Girl, Fluffy had a job.&lt;/p&gt;
&lt;p&gt;Fluffy had lots of jobs, actually. Her whole story was about finding work and paying rent and looking fabulous while doing it. She was the embodiment of Edwardian style, often drawn with enormous feathered hats and magnificent dresses. It was her working class appeal that sparked her popularity, and by the end of 1907 there were more than a few young women sporting the Fluffy look. The Herald even ran contests to find the perfect real life Fluffy. So nuts was everyone for Fluffy Ruffles that a musical based on the story appeared on Broadway in 1908.&lt;/p&gt;
&lt;p&gt;In reality, Fluffy Ruffles was nothing like the Gibson Girl. The Gibson Girl was elegant, sophisticated, and quite well healed. The Gibson Girl didn&#39;t work because she didn&#39;t have to, but Fluffy did. The only thing Fluffy has in common with the Gibson Girl is that they are surrounded by stupid men. In the world of the Gibson Girl, men are considered, in Charles Dana Gibson&#39;s words and under the title of one collection, the Weaker Sex, but in Fluffy&#39;s world, men are much less elegantly assigned a supporting role, making her more like Theodore Dreiser&#39;s Sister Carrie. Unlike Carrie, who has to deal with sweatshops, lechers and turn of the century urban life, Fluffy is safe on the pages of the Sunday paper where the graphic detail of social injustice is reserved for the editorial columns. Where Carrie, a self centered seemingly unfeeling and amoral character when measured by the standards of her time, who later becomes a saint, a champion and an astonishing success, made her way by working in unspeakable conditions, pulling herself above it by manipulating the men, often married, who played her and paid her, living life on her own terms and eventually becoming a star on the New York stage while her latest, final conquest finds only financial ruin and a gas pipe, Fluffy teaches children and wonders about a new hat. Even so, the men in Fluffy&#39;s world are no different, just adorned with poetic innuendo.&lt;/p&gt;
&lt;p&gt;Stories of social injustice, especially those either directly or indirectly possessed of sexual tension are always hits and hits often become movies, or, in 1908, stage plays. Fluffy had made it to the biggest stage of them all, just as Carrie had, but there&#39;s a drink named for Fluffy because her work, or what we know of it, is much more suited to a mainstream narrative. The Gibson Girl has a cocktail, too, much for the same reasons, but it&#39;s doubtful we&#39;ll be drinking a Sister Carrie anytime soon.&lt;/p&gt;
&lt;p&gt;In the end, the Fluffy Ruffles cocktail was the Cosmopolitan of its time, only where a much similar character (maybe not so ironically named Carrie) from the 1990s drank Cosmos, Fluffy never enjoyed an eponymous cocktail. Instead, it got named after her, and that does sort of fill in the blanks about where the drink came from. The drink, like the character, is very much of its time. A stirred drink of equal parts rum and vermouth, a variation of a Manhattan, it&#39;s as pre Prohibition as it gets. There&#39;s nothing special going on here, it fits the profile of an early 20th century drink, and it still works. It&#39;s not an elegant thing, it&#39;s an urban thing, and like the character for which it&#39;s named, proves that you can be both working class and fabulous.&lt;/p&gt;
&lt;p&gt;1 1/2 oz Flor de Cana Extra Seco Rum (Bacardi if following Craddock&#39;s recipe)&lt;/p&gt;
&lt;p&gt;1 1/2 oz Martini Sweet Vermouth&lt;/p&gt;
&lt;p&gt;Stir with ice and serve up. Garnish with a lime twist or piece of lemon.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>404</title>
    <summary>A digital cocktail from an unlikely source meets the social network.</summary>
    <link href="https://www.tonympdx.com/blog/post/404"/>
    <updated>2021-01-16T22:30:00.000Z</updated>
    <id>https://www.tonympdx.com/blog/post/404</id>
    <content xml:lang="en" type="html">&lt;p&gt;The 404 is a fairly modern cocktail without a story. It just simply is. There are, however, several variants, one with vodka, and one with gin, because, options; those ever present characteristics of modern consumerism and informed choice. It’s a cocktail that could only come from a post-postmodernist world, the so called metamodernist, where 1337 is spoken in emojis and the only hypertext transfer protocol, HTTP, response code known outside the circle of those who create the abstraction is “not found.”&lt;/p&gt;
&lt;p&gt;Search for this cocktail. The results suit the name. There’s not much written about it, except that it comes from the venerable Mr. Boston Official Bartender’s Guide, a suitable, if somewhat ironic place for a drink called 404. The Mr. Boston book, originally titled Old Mr. Boston Deluxe Official Bartender’s Guide, has been in continuous publication, regularly updated and revised, since 1935. The craft cocktail community’s love affair with old books is well documented, and titles such as The Savoy Cocktail book and names like Harry MacElhone carry a certain reverence as the out of print or long passed often do. The Mr. Boston book isn’t like that. You can buy a new one at Powell’s.&lt;/p&gt;
&lt;p&gt;Therein lies the rub. When nothing is done without a proper return on investment and nothing is as it seems, when 404 carries a weight of meaning beyond its intent, a book can’t be just a collection of recipes. The real return on the investment is the cachet of publishing, and the celebrity, or bar, or restaurant, or venture capitalist behind it. Who owns the rights? Will it improve shareholder value, and can it be sold in the lobby? What, then, is the bottom line when everything is collateral, and marketing is left to the masses who co-opted the means of social liberation from the grips of its creators and placed it firmly in the hands of the gatekeepers? Make no mistake, Facebook, Google, Twitter, &lt;a href=&quot;http://et.al/&quot;&gt;et.al&lt;/a&gt;., all of the digital giants, are advertising companies, and their commodity is attention, given freely by anyone who grew up knowing they are the product, and who now also know what those naive early believers in a digital world as a democratized world didn’t. Everything is marketing. Want friends? Market yourself, be the product, sell your attention at a premium, and trade in likes. Then, when it goes dark, and your profile is 404, effectively cease to exist.&lt;/p&gt;
&lt;p&gt;It’s easy to overlook the Mr. Boston book because what does it get you besides a book of recipes? Is consuming something connected to greater consumption not better, especially when it’s something which you can own and tweet about, hoping the sponsor, the abstraction, will notice and “like,” thus verifiably increasing your currency of attention? Of course it is, and we all know it, and we all seek it, even when we also know we don’t want it. That’s why the old books and the associated names matter. It’s the picturesque past where you don’t have to be “on” all the time, where you don’t have to constantly manage your profile so others will “like” you and your stuff, and you’re not reminded by “friends” that if you want them to come to your holiday party you have to pay them. It’s a hipsterish yearning for the “simple times” of a modernist world where everyone celebrated the same holidays, went to the same schools, worked the same hours, went to the same church, ate the same food, read the same books and looked at the same art. Postmodernism asks too much, expects too much, and how do I know if anything is real or good without someone validating me? Kurt Vonnegut once wrote, if you want to know what good art is, you have to look at alot of art. That’s true of many things and it takes time we don’t have because we all have to make money. Fealty to advertising overlords, and reverence for history in a very plastic way becomes a coping mechanism, an escape hatch.&lt;/p&gt;
&lt;p&gt;This isn’t new, and it’s not critique. Every generation decries the perceived social decay wrought by its children, but it’s never true. It’s not better, it’s not worse, it’s simply different, and when it’s different enough, you wrap yourself in nostalgia and reach for the past by reading the old books, drinking the old drinks, wearing the fancy socks and parting your hair in the middle. You can even recreate the speakeasy as a real time refuge, but you can’t stop checking your phone. It’s escapist, but it’s not immersive. It’s having a Miller High Life while updating your Facebook status, a confluence, and you’re allowed to enjoy it, even if you take the jargon with you and call a cocktail a 404.&lt;/p&gt;
&lt;p&gt;The Mr. Boston book straddles those worlds. It’s both vintage, with all the cachet of connection to the picturesque past, and modern, still in print, but lacking the commercial authority of something published by Dale DeGroff, or Death and Co. It’s a relic of the past that won’t stay there, which makes the 404, a very metamodernist cocktail, so very out of place among it’s pages. Don’t worry, though. It’s not entirely free of vintage norms. The 404 comes in 2 versions, Mrs. 404, made with gin, and Mr. 404 made with vodka. This alone makes one wonder if the name, 404, has any connection at all to the HTTP response code, or if we’re just projecting our own desire in a not very witty attempt at a technical wink and nod.&lt;/p&gt;
&lt;p&gt;The 404 cocktail itself is no different. It, too, speaks to fantasy, to a continental worldliness through its ingredients. Exotic amaro from Italy, and old liqueur, once long out of production but resurrected by a visionary entrepreneur determined to adorn the nostalgic speakeasy with proper bottles. Also, lemon and gin, or vodka for those who want the nostalgia, but only to a point. You know what, though? The 404, either version, is a remarkable drink. It’s very good, very drinkable, and very easy to have one or three too many. It should definitely be more well known than it is, but, in the speakeasy way, we’ll take it and keep it our own if we must. What’s the difference between the versions? Gin will bring out more of the lemon flavor, and vodka seems to provoke more of the orange, but the differences are minor. Overall, however, the gin version is just a bit more complex, but do your own thing. It’s your creation, your fantasy, just remember to check your phone, update your status, and give a “like” if you love it.&lt;/p&gt;
&lt;p&gt;1 1/2 oz Gin, or Vodka&lt;br&gt;
3/4 oz St. Germain Elderflower Liqueur&lt;br&gt;
3/4 oz Lemon juice&lt;br&gt;
1/2 oz Aperol&lt;br&gt;
1/4 oz Simple syrup&lt;/p&gt;
&lt;p&gt;Shake with ice and strain into a cocktail glass. Garnish with an orange peel.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Adding Google Custom Search to a headless Ghost blog with a React/Redux frontend</title>
    <summary>Ghost does not have search functionality, so you have to add it yourself. This is how I added search to Ghost using Google Custom Search and Google APIs.</summary>
    <link href="https://www.tonympdx.com/blog/post/adding-google-custom-search-to-a-headless-ghost-blog-with-a-react-redux-frontend"/>
    <updated>2019-04-16T19:16:00.000Z</updated>
    <id>https://www.tonympdx.com/blog/post/adding-google-custom-search-to-a-headless-ghost-blog-with-a-react-redux-frontend</id>
    <content xml:lang="en" type="html">&lt;p&gt;The Portland Pour is a headless Ghost blog with a React/Redux front end. We chose this architecture for several reasons, including planned growth which includes other services like an online store, news and event aggregation, and workshop promotion. Our desire for a fully decoupled front end, which would allow us freedom of choice and change on any of our back end or external services was important to us, as was the need for content related components which we could use on other projects consistent with our style guide.&lt;/p&gt;
&lt;p&gt;The simplicity of Ghost, and the super easy Content API, along with its scalability, speed, and ability to host on our servers made it the winner, in spite of the lack of search. Lack of search as a core feature would have otherwise been a deal breaker, but all the other platform options fell short on other counts, and we really like Ghost exactly because of its basic feature set, so we chose it knowing that we would have to deal with search in some way or another.&lt;/p&gt;
&lt;p&gt;We began by surveying existing solutions for Ghost, of which there are several, but the downside they share is that they are all client side. There is some virtue in client side search and indexing, it allows for speed, typeahead, and some nice things, but for it to work it needs all the content from Ghost on the client. For a smaller site, or a blog that only updates once in a while, this wouldn’t be a problem and would be a good option, but there’s a point where it seems inefficient to download all the content just for search, and in our case it just wasn’t a reasonable solution.&lt;/p&gt;
&lt;p&gt;We considered hosting our own search engine. Elasticsearch is an excellent product, as are other choices like Solr, but their vast feature sets are much more than we need, and the installation and technical attention required by a stand alone search engine, again, wasn’t a reasonable solution.&lt;/p&gt;
&lt;p&gt;We chose a simple blog because we want the simplicity that empowers us to just write and post without distraction, and maintaining a search engine is a distraction. Google, in my opinion, is a good search engine, someone else maintains it so we don’t have to, there’s a reasonable UI to set up and configure Custom Search, and they offer a REST API. If we can get the results as a JSON response, we can request only what we need from Ghost. Therefore, we chose Google Custom Search for our search engine.&lt;/p&gt;
&lt;h2&gt;Setting up Google Custom Search&lt;/h2&gt;
&lt;p&gt;Before you can set up and use Google Custom Search (CSE), you’ll need a GSuite account with CSE enabled. If you have a GSuite account, and admin access, you can enable &lt;strong&gt;Google Custom Search&lt;/strong&gt; in the Admin panel at &lt;strong&gt;Apps &amp;gt; Additional Google Services&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Once CSE is enabled, you can create a new search engine. Visit &lt;a href=&quot;https://cse.google.com/cse/all&quot;&gt;https://cse.google.com/cse/all&lt;/a&gt; and sign in with your GSuite credentials, and add a new search engine.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.sanity.io/images/5pnyimif/production/c8e249f6d27e949e5cabdc2863a825b4156bfc92-572x285.png?w=600&quot; alt=&quot;undefined&quot;&gt;&lt;/p&gt;
&lt;p&gt;Now enter the domain(s) you’d like to search. In our case, we only want to search blog posts, so we use the URL to our posts. Remember, the URLs for us are controlled by React Router, not Ghost, so we use the public URLs from our React front end.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.sanity.io/images/5pnyimif/production/9b78788a2b730358bb47f26e38de294f23c13c05-971x826.png?w=600&quot; alt=&quot;undefined&quot;&gt;&lt;/p&gt;
&lt;p&gt;Your new custom search engine is now ready and will appear in your list of search engines. Click on it to open the detail view and note the search engine ID.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.sanity.io/images/5pnyimif/production/6660c932348b9ed286985e7e25633db280fbdce2-847x881.png?w=600&quot; alt=&quot;undefined&quot;&gt;&lt;/p&gt;
&lt;p&gt;Next, set up the API. When you make a CSE, a JSON API is available, but you need an API key. To get an API key, click on the &lt;strong&gt;Get started&lt;/strong&gt; button at the bottom of the CSE detail screen. You’ll want to select the Custom Search JSON API. You can also navigate directly to &lt;a href=&quot;https://developers.google.com/custom-search/v1/introduction&quot;&gt;https://developers.google.com/custom-search/v1/introduction&lt;/a&gt; because that’s where the button takes you.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.sanity.io/images/5pnyimif/production/6fa769533491ae166e7ca9e6d2f2efd5653476d3-843x870.png?w=600&quot; alt=&quot;undefined&quot;&gt;&lt;/p&gt;
&lt;p&gt;Once there, click &lt;strong&gt;GET A KEY&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.sanity.io/images/5pnyimif/production/a278c930b5eebaa900db6ded427fece523e90976-1249x1064.png?w=600&quot; alt=&quot;undefined&quot;&gt;&lt;/p&gt;
&lt;p&gt;A dialog will open, select the search engine you created before, and a key will be generated for you. Note this key because you will need it to access the API.&lt;/p&gt;
&lt;h2&gt;Using Google Custom Search in a React app&lt;/h2&gt;
&lt;p&gt;The CSE API has only one endpoint, &lt;strong&gt;list&lt;/strong&gt;. You may have noticed, when setting up the search engine, that there are 2 variants of the API, the CSE API, and the CSE site restricted API. The CSE API limits requests to 10,000 per day, but you get unlimited sites to search. The CSE site restricted API only lets you search within one domain, but you get unlimited requests. Whichever you choose is based on your situation, but the &lt;strong&gt;list&lt;/strong&gt; endpoint is the same for both. You can find documentation, and a sandbox, at &lt;a href=&quot;https://developers.google.com/custom-search/v1/cse/list&quot;&gt;https://developers.google.com/custom-search/v1/cse/list&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;An API request to the &lt;strong&gt;list&lt;/strong&gt; endpoint requires three things:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;**q **— the search query&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;cx&lt;/strong&gt; — the search engine ID&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;key&lt;/strong&gt; — your API key&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There’s also an extensive list of additional parameters to shape your request as you see fit. For this exercise, we’ll be using the three required parameters, plus &lt;strong&gt;num&lt;/strong&gt;, number of search results to return, and &lt;strong&gt;start&lt;/strong&gt;, the index of the first return result. The latter allows for paging through large result sets. The API only returns up to 10 results at a time, but, as you’ll see, we request 9 at a time so we can lay our results view out in a grid, like our other list views.&lt;/p&gt;
&lt;p&gt;Request the results from the API as you would in your React app. In our case, The Portland Pour is a hybrid app. The first view is rendered on the server using Express, and all subsequent views are handled on the client. React Frontload, a library that asynchronously requests data on either server or client is used for both, and Redux is used for state. That said, you can request from the CSE API using your pattern of choice. It’s just a REST API, so have at it, but this is how we do it.&lt;/p&gt;
&lt;p&gt;We also use views as one would controllers in an MVC architecture, and our components are stateless. Search, then, is a view that manages the activity required to request search results from Google, and request content from Ghost. This means you can use the search bar, or go directly to a search URL.&lt;/p&gt;
&lt;p&gt;The route to the search view looks like this, where &lt;strong&gt;q&lt;/strong&gt; is the search term, and **page **is the page within the search results used to figure out the &lt;strong&gt;start&lt;/strong&gt; parameter of the CSE API request:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;Route path=&amp;quot;/search/:q/:page&amp;quot; component={SearchView} /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To search, a search term is entered into the search form presented by the SearchBar component&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.sanity.io/images/5pnyimif/production/8f9c9f560f0e44a986cd65bb37e1c778a03f5eb6-966x105.png?w=600&quot; alt=&quot;undefined&quot;&gt;&lt;/p&gt;
&lt;p&gt;We use local state to control the form input, then, when either the search button, or enter key is clicked or depressed, navigate to the search view by calling the &lt;strong&gt;search&lt;/strong&gt; method on click (or enter).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;search = () =&amp;gt; {
  if(this.state.q.length) {
    this.props.history.push(&#39;/search/&#39; + this.state.q + &#39;/1&#39;);
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Notice in the example that we pass the value of the input (this.state.q) and 1 for the page, since this is a new search, as route match params.&lt;/p&gt;
&lt;p&gt;React router navigates to the search view, and passes the params. In the search view, React Frontload handles the request. Here is the Frontload method. We’ll step through it line by line and look at the actions and reducers and how they work, but, here it is in full.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const frontload = async props =&amp;gt; {
  await props.dispatch(blogActions.waiting());
  await props.dispatch(blogActions.clearPosts());
  const q = props.match.params.q;
  const start = ((props.match.params.page - 1) * 9) + 1;
  const req = &#39;q=&#39; + q + &#39;&amp;amp;num=9&amp;amp;start=&#39; + start;
  const search = await blogActions.search(req);
  await props.dispatch(search);
  if(search.data.slugs.length) {
    const query = {filter: &#39;slug:[&#39; + search.data.slugs.toString() + &#39;]&#39;}
    const posts = await blogActions.fetchPosts(query);
    await props.dispatch(posts);
  }
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;First things first, we dispatch a waiting action to load an animation for the user to see while the work is done. The animation isn’t always seen, both the CSE API and Ghost Content API are pretty snappy, but, you never know, so load that animation.&lt;/p&gt;
&lt;p&gt;Next, clear out any existing posts in state. We use a single list component which lists whatever is in the Redux posts collection, so we want it empty. Otherwise, there would be a flash of previous content, and that’s looks bad.&lt;/p&gt;
&lt;p&gt;The parameters we need, &lt;strong&gt;q&lt;/strong&gt; and &lt;strong&gt;start&lt;/strong&gt; are next. The first, &lt;strong&gt;q&lt;/strong&gt;, is the search string, so we assign it to a constant, but &lt;strong&gt;start&lt;/strong&gt; we have to figure out. Our app uses the concept of pages, as does the Ghost Content API, but the CSE API uses item count, so we have to translate our page to the CSE starting item. We know we request 9 items from the CSE API, so a little math is used to figure out what the &lt;strong&gt;start&lt;/strong&gt; parameter should be.&lt;/p&gt;
&lt;p&gt;This little bit of the request is concatenated, line 6, and an action to make the request is called on line 7. Let’s look at the action. BTW, if you’re following along with our gists, note that they are named &lt;strong&gt;medium-…&lt;/strong&gt; because they are being used in a Medium post. It helps me stay organized.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const success = (type, data) =&amp;gt; { return { type: type, data: data }};
const fail = error =&amp;gt; { return { type: blogConstants.ERROR, error: error };

const search = (q) =&amp;gt; {
  const endpoint = searchHelper.getEndpoint(q);

  return new Promise((resolve, reject) =&amp;gt; {
    API.get(endpoint)
      .then(
        search =&amp;gt; {
          const data = {};
          data.raw = search;
          data.q = search.queries.request[0].searchTerms;
          data.slugs = search.items ? search.items.filter(item =&amp;gt; {
            return item.link.includes(&#39;post&#39;);
          }).map(item =&amp;gt; {
            const link = item.link.replace(/\/$/, &#39;&#39;);
            return link.split(&#39;/&#39;).pop();
          }) : [];
          resolve(success(blogConstants.SEARCH, data));
        },
        error =&amp;gt; {
          reject(fail(error));
        }
      );
  });
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Stepping through it, line 5 is where we prepare the endpoint. The helper method looks like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import config from &#39;../config&#39;;

const getEndpoint = (req) =&amp;gt; {
  const { cx, path } = config.search.api;

  return path + `?key=${process.env.REACT_APP_API_KEY_SEARCH}&amp;amp;cx=${cx}&amp;amp;${req}`;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Notice that we store the path to the endpoint, &lt;a href=&quot;https://www.googleapis.com/customsearch/v1&quot;&gt;https://www.googleapis.com/customsearch/v1&lt;/a&gt;, and our search engine ID in our app’s config (line 4) but the API key is kept on the server in a .env file for security. This is a cool thing about React. If you put data in a .env file at the root of your Node server, and preface it with &lt;strong&gt;REACT_APP_&lt;/strong&gt; it will be available on the client in process.env.&lt;/p&gt;
&lt;p&gt;Now that we have an endpoint, let’s get back to our action and see how the request is made (medium-search-action.js above, line 11). The API.get method is this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function get(endpoint, options = {}) {
  return fetch(endpoint, options).then(response =&amp;gt; {
      return response.ok ? response.json() : Promise.reject(response.statusText);
    }).then(data =&amp;gt; {
      return data;
    });
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once we have the response, the data can be parsed. If we look at the response from the CSE API, it looks like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.sanity.io/images/5pnyimif/production/18197377fe156e05c4dc65837f4248af107ae478-825x667.png?w=600&quot; alt=&quot;undefined&quot;&gt;&lt;/p&gt;
&lt;p&gt;There is alot of information, but what we want is the &lt;strong&gt;items&lt;/strong&gt; collection, and will be parsing the link for each item. You can see this starting in the action gist above, on line 17. While we know we are only searching post views from our app, we filter just to be safe and look only for links that contain &lt;strong&gt;post&lt;/strong&gt;. What we want from those links is the last part, the part after &lt;strong&gt;post/&lt;/strong&gt; which is the post slug.&lt;/p&gt;
&lt;p&gt;Another thing we know is that we index URLs in Google with no trailing slash, but we also assume that Google may have them with trailing slashes, too. So, to be safe, as seen beginning on line 19 of the action gist, we drop a trailing slash from the link, if it’s there, then split the link on the slashes, and pop the last item from the array. After we map all the items, the result is an array of slugs, which is dispatched using the &lt;strong&gt;success&lt;/strong&gt; method, shown on line 1 of the action gist.&lt;/p&gt;
&lt;h2&gt;Search results and Ghost&lt;/h2&gt;
&lt;p&gt;Remember that Frontload method where all this started? Let’s look at that again, and see how we can get our content from Ghost.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const frontload = async props =&amp;gt; {
  await props.dispatch(blogActions.waiting());
  await props.dispatch(blogActions.clearPosts());
  const q = props.match.params.q;
  const start = ((props.match.params.page - 1) * 9) + 1;
  const req = &#39;q=&#39; + q + &#39;&amp;amp;num=9&amp;amp;start=&#39; + start;
  const search = await blogActions.search(req);
  await props.dispatch(search);
  if(search.data.slugs.length) {
    const query = {filter: &#39;slug:[&#39; + search.data.slugs.toString() + &#39;]&#39;}
    const posts = await blogActions.fetchPosts(query);
    await props.dispatch(posts);
  }
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Line 9 is where we do the same thing we did to make a request to the CSE API, only this time we’re making a request to the Ghost Content API. Before we do, check to make sure that there are slugs to request. There may not be. If we were on the last page of the search, or we made a request to the CSE API and got no items, we can skip making a request to the Ghost Content API.&lt;/p&gt;
&lt;p&gt;If, however, we do have an array of slugs, we can request those posts. The Ghost Content API query is prepared on line 10 according to the Content API documentation at &lt;a href=&quot;https://docs.ghost.org/api/content/&quot;&gt;https://docs.ghost.org/api/content/&lt;/a&gt;. Specifically, we’re concerned with filtering, &lt;a href=&quot;https://docs.ghost.org/api/content/#filtering&quot;&gt;https://docs.ghost.org/api/content/#filtering&lt;/a&gt;. If we use the &lt;strong&gt;filter&lt;/strong&gt; parameter, and pass an array of slugs, as a comma delimited string in our query, we’ll get those posts in the response.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;filter=slug:[fancy-gin-cocktail,gin-rickey,pink-gin,gin-basil-smash,fitzgerald]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can then pass this query to our action, &lt;strong&gt;fetchPosts&lt;/strong&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const success = (type, data) =&amp;gt; { return { type: type, data: data }};
const fail = error =&amp;gt; { return { type: blogConstants.ERROR, error: error }};

const fetchPosts = (opts = {}) =&amp;gt; {
  const options = Object.assign(
    {},
    {
      filter: &#39;featured:false&#39;,
      include: &#39;authors,tags&#39;,
      limit: 9,
      order: &#39;published_at%20DESC&#39;
    },
    opts
  );
  const queryString = Object.keys(options).map(key =&amp;gt; key + &#39;=&#39; + options[key]).join(&#39;&amp;amp;&#39;);
  const endpoint = blogHelper.getEndpoint(&#39;posts&#39;, queryString);

  return  new Promise((resolve, reject) =&amp;gt; {
    API.get(endpoint)
      .then(
        posts =&amp;gt; {
          resolve(success(blogConstants.GET_POSTS, posts));
        },
        error =&amp;gt; {
          reject(fail(error));
        }
      );
  });
}
view raw

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Our app uses this method any time it needs to fetch posts from the Content API, so, as you can observe on line 5, we have a few default parameters. When we pass parameters to this method, if we pass parameters to this method, they will be used instead, or in addition to, the defaults. The only parameter we pass in this case is the filter. The others are good. Notice how we request the posts in date order (line 13) because we always want our results in the order in which they were published, newest first, for any given page, regardless of the order CSE thinks they should be in. They will be generally relevant by page, but your case may require more refined ordering, or the order in which Google wants, so adjust accordingly.&lt;/p&gt;
&lt;p&gt;From this options object, the query is created, as shown on line 17, and the endpoint prepared with a similar, but not entirely the same, method as before. You can compare to the &lt;strong&gt;getEndpoint&lt;/strong&gt; method above, which is a bit different because of the requirements of two different APIs.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import config from &#39;../config&#39;;

const getEndpoint = (endpoint, query=&#39;&#39;, slug=&#39;&#39;) =&amp;gt;  {
  let ret = config.blog.host;

  ret += &#39;/&#39;;
  ret += config.blog.api.path;
  ret += &#39;/&#39;;
  ret += config.blog.api.endpoints[endpoint];
  ret += slug ? &#39;/&#39; + slug : &#39;/&#39;;
  ret += &#39;?&#39;;
  ret += &#39;key=&#39; + process.env.REACT_APP_API_KEY_BLOG;
  ret += query ? &#39;&amp;amp;&#39; + query : &#39;&#39;;

  return ret;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As before, we keep the standard stuff in config (path and list of possible endpoints) and the API key in a .env file on the server. The rest is concatenation.&lt;/p&gt;
&lt;p&gt;The request to the Content API is made using the same &lt;strong&gt;API.get&lt;/strong&gt; method we used to request search results from the CSE API above. We pass the response, our list of posts, back to the Frontload method, which, as seen in the frontload-search-example gist above, on line 10, is dispatched to Redux. Redux then disables the loading animation, causes a render, and the search results, our collection of 9 posts, is displayed using the same component as any other list of posts in our app.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.sanity.io/images/5pnyimif/production/ab7ca4a399505d2e66fec55c968cc2b78a76dd61-1280x1071.png?w=600&quot; alt=&quot;undefined&quot;&gt;&lt;/p&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;An examination of patterns and methods such as this may look complex at first, but it really isn’t. If you were able to follow along, you can see all that we are doing is requesting a list of 9 items from one API, and then using those items to request the same 9 items from another API. What looks like complexity really is just a desire to reuse as much code as we can, and stay DRY.&lt;/p&gt;
&lt;p&gt;Is this approach inefficient? Two API requests for one set of data? Yes and no. On the one hand, both APIs are very fast, and we’re only requesting 9 items, regardless of how large the search results may or may not be. On the other hand, it’s still two API requests for one set of data.&lt;/p&gt;
&lt;p&gt;The alternative, however, is not nice. We could have used the CSE URL and an iframe to embed search on our blog, but then the search results would be an entire HTML payload rendered in a style that is not ours, with results that are different than how we present our content lists everywhere else. Iframes, in my opinion, are so very 2007 (OK, iframes still have value, and YMMV, but REST APIs are a better choice in some cases and for some projects, such as ours), and there are better ways to do things, even if they require two requests for one set of data.&lt;/p&gt;
&lt;p&gt;We totally prefer the option that gives us the freedom to present search results as we want them, and we feel it’s a fair price to pay for our users, who see lists of posts in the same way in every context. You may disagree, or have different ways of achieving the same ends, but this is what works for The Portland Pour.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>The UX of beverage recipes</title>
    <summary>Recipes for food and drink are common enough, but what makes them usable? Is there a standard format, should there be, and what is it that makes one recipe useful and another confusing? This is how we set our recipe format and why.</summary>
    <link href="https://www.tonympdx.com/blog/post/the-ux-of-beverage-recipes"/>
    <updated>2019-02-11T22:13:00.000Z</updated>
    <id>https://www.tonympdx.com/blog/post/the-ux-of-beverage-recipes</id>
    <content xml:lang="en" type="html">&lt;p&gt;Recipes are ubiquitous. It’s likely everyone, at some point in their lives, will use a recipe, maybe for food, maybe for drinks, or maybe for craft items. The format is simple enough. At its most basic it’s a title, a description with a picture or two, a list of ingredients, and instructions. Some might add servings, prep time, or nutrition info, but it’s still a recipe, something that should be easy to use because you’re likely using it while doing stuff. So why are some recipes easy to follow and use, while others aren’t?&lt;/p&gt;
&lt;p&gt;We spent alot of time thinking about how best to present and use recipes. At The Portland Pour, recipes are some of our most common content, and we wanted a format that would be easy to use, whether you’re at a desktop, on your phone in the kitchen, or in print on a recipe card, and we came to some conclusions about what makes a recipe work for, in our case, beverages.&lt;/p&gt;
&lt;p&gt;Our research included a very unscientific survey of recipes around the web. We took a random sampling of about 2 dozen food and beverage recipe sites, from Epicurious to Bon Appetite, to random food blogs. We took a look at other sites like Punch, Imbibe, Difford’s Guide, and random cocktail and soda blogs. We surveyed anything we could find on recipe style, publishing guidelines, or digital formats. Finally, we got into the old books like the Joy of Cooking from 1950 something, cocktail guides from the 1930s and older, and newspaper and magazine archives at the library because who doesn’t love a micro-fiche machine? The results were all over the board, and the older the sample, the more confusing it often was. There’s also alot that works, and we’re both encouraged and inspired by some of our samples.&lt;/p&gt;
&lt;p&gt;A note on measurement units. We use imperial measurements for our own recipes, and, as noted later, were not satisfied with the conversions to metric. We tried listing recipes as both imperial and metric, but the conversions always had problems in the details. As a local, US based project, most of our work will use imperial measurements, however, we do not convert metric recipes. Instead, we publish the recipes as written, which is almost always imperial, with the occasional metric.&lt;/p&gt;
&lt;h2&gt;Pain points&lt;/h2&gt;
&lt;p&gt;Recipes can add friction in several ways, from how ingredients are listed to how instructions are written. The latter turned out to be the biggest problem. Too often instructions were unnecessarily verbose, skipped important information, or, strangely enough, too well written. Yes, active voice is always preferable, as are proper declarative sentences, yet it turns out that short simple steps are exactly what a recipe needs.&lt;/p&gt;
&lt;p&gt;Another problem is positioning. The instructions should be near the ingredients, which should be near the title and any pictures. This was not the case in all of our samples, some being separated by advertisements, others placed horizontally on the page. Vertical alignment seems easiest to use, and that counts for ingredients, too. Some samples listed ingredients in a single line, separated by commas, others placed them too close to each other, and others used numbered lists.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.sanity.io/images/5pnyimif/production/0792b502de80b664e4dbb9b07b22f226a1194557-1200x1207.png?w=600&quot; alt=&quot;undefined&quot;&gt;&lt;/p&gt;
&lt;p&gt;We then consulted our own writing style guide, The Associated Press Stylebook, which we use for all of our written content, and which also provides guidelines for formatting recipes. We like the AP style for almost everything, except their recipe guidelines, but they are all quite reasonable, and began as our starting point.&lt;/p&gt;
&lt;h2&gt;Measurements&lt;/h2&gt;
&lt;p&gt;Ingredients are useless without measurements, and our samples all had different ways of noting quantities. Some used abbreviations, some didn’t. Some spelled things out completely, some didn’t. Some used decimals, others used fractions.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.sanity.io/images/5pnyimif/production/e2095d643f04dec7e473bb6d74940ace07d1e1ea-921x180.png?w=600&quot; alt=&quot;undefined&quot;&gt;&lt;/p&gt;
&lt;p&gt;The AP style calls for fully spelling measurement units in lower case and many websites we found follow this advice. In fact, we noticed a trend toward fully spelling out units of measurement.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1 cup&lt;/li&gt;
&lt;li&gt;3 teaspoons&lt;/li&gt;
&lt;li&gt;1 tablespoon&lt;/li&gt;
&lt;li&gt;15 milliliters&lt;/li&gt;
&lt;li&gt;200 grams&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In the interests of space, and keeping our layout consistent across devices, we chose to use standard abbreviations instead. Drink recipes deal with fluid ounces, teaspoons, dashes, and item quantities (such as 1 cherry). There’s no accepted abbreviation for a dash of something, so we spell that out, along with any measurement that isn’t ounces, teaspoons, or tablespoons, and item quantities are numbered unless the item is usually only included one at a time. Finally, there are no plural abbreviations (always “oz” never “ozs”). Metric is another matter, and much easier. If we have metric units, it’s all milliliters and dashes, the former abbreviated as ml, and the latter spelled out.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;2 oz&lt;/li&gt;
&lt;li&gt;1 tsp&lt;/li&gt;
&lt;li&gt;2 dashes&lt;/li&gt;
&lt;li&gt;30 ml&lt;/li&gt;
&lt;li&gt;3 cups&lt;/li&gt;
&lt;li&gt;1 pint&lt;/li&gt;
&lt;li&gt;2 olives&lt;/li&gt;
&lt;li&gt;A lemon peel&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In our samples, units used varied. Most cocktail recipes we found list measurements in ounces, milliliters, or centiliters (oz, ml, cl, respectively), and most soft drink recipes, both from beverage and food sources, use cups, or liters. We found it mattered only when there was no standard pattern. For us, we use ounces and milliliters.&lt;/p&gt;
&lt;p&gt;It’s also important not to mix units of measure. Imperial measurements can be tablespoons, ounces, cups, pints, etc. It got confusing when mixing them together, just as it is when mixing ml and cl in the same ingredient list.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.sanity.io/images/5pnyimif/production/4b775444c345a8648bbc51794566b4b126741825-729x208.png?w=600&quot; alt=&quot;undefined&quot;&gt;&lt;/p&gt;
&lt;p&gt;All measurements should use similar units where possible. Again, for metric, not a problem, but for imperial measurements there are some choices to make. For instance, 1/2 Tbsp is the same as 1/4 oz, and ounces is a common beverage unit of measure, so specify all ingredients in ounces until too small to measure in ounces. At that point you’re in dash or teaspoon territory, so rule of thumb should be, if it’s less than 1/4 oz, and more than a dash, it’s a teaspoon.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Yes:&lt;/strong&gt;&lt;br&gt;
3/4 oz Lime juice&lt;br&gt;
1/4 oz Simple syrup&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;No:&lt;/strong&gt;&lt;br&gt;
3/4 oz Lime juice&lt;br&gt;
1/2 Tbsp Simple syrup&lt;/p&gt;
&lt;p&gt;Where partial quantities are needed, fractions are preferred. Again, metric isn’t a worry because it doesn’t use partial units. It’s almost always a nice round number, like 30 ml, or 200 grams. As a side note, we use both metric and imperial units, just not at the same time. We tried converting recipes from one to the other, and it never really worked as well as we’d hoped, so now we just keep the recipes in the units in which they were created. For us, that’s mostly imperial, and, as a local project with an audience mostly in the US, we will, by consequence, favor imperial measurements.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Yes:&lt;/strong&gt; 1 1/2 oz&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;No:&lt;/strong&gt; 1.5 oz&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In the case of 2 numbers adjacent to each other, we stick with the AP guidelines, and spell out the first number.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;one 12 oz can of Pepsi&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Where there may be confusion on the proper unit of measure, such as a dry product measured in ounces (fluid measure or weight?) we spell all measurements fully throughout.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1 fluid ounce Citric acid&lt;/li&gt;
&lt;li&gt;1 fluid ounce Water&lt;/li&gt;
&lt;li&gt;1 teaspoon Lemon juice&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Ingredients&lt;/h2&gt;
&lt;p&gt;Ingredients themselves have 2 concerns: how do you, or do you capitalize them, and how do you delineate them, both from their measurements, and from each other.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.sanity.io/images/5pnyimif/production/1712869e551610f7de852219efdb85afd72b7197-1400x283.png?w=600&quot; alt=&quot;undefined&quot;&gt;&lt;/p&gt;
&lt;p&gt;In almost all of our samples, ingredients aren’t capitalized unless they are brand names or other proper nouns, such as London dry gin. This is also as specified in the AP guidebook, however, neither our samples, nor the AP delineate the ingredients from their measurements, and this made things a little difficult to read at a glance, especially if working from a handheld device. We chose to sentence case ingredients as a way to use the capital letter of the ingredient to delineate it from the measurement. This is most useful during prep, especially for those who use two glances for every ingredient, one glance for the measurement so the proper measuring tool can be selected, and one glance for the ingredient itself.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1 oz Lemon juice&lt;/li&gt;
&lt;li&gt;1/2 oz Pineapple gomme syrup&lt;/li&gt;
&lt;li&gt;1/2 oz Grenadine&lt;/li&gt;
&lt;li&gt;2 cups Brewed coffee&lt;/li&gt;
&lt;li&gt;1 1/2 oz Old tom gin&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Brand names are always capitalized and spelled out in full.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;4 oz Royal Crown Cola&lt;/li&gt;
&lt;li&gt;2 oz Bull Run Single Malt Whiskey&lt;/li&gt;
&lt;li&gt;1 1/2 oz Ransom Old Tom Gin&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Capital letters help delineate ingredient names from their measurements, but what about from each other? Some of our samples use bullet lists, others use relaxed line spacing, others use numbered lists and still others use single line spacing. The AP recommends single line spacing, but that’s hard to read, as are numbered lists. The list numbering sometimes gets confused with the unit of measurement, so we went with both bullet lists and relaxed spacing. We use bullet lists on some of our newer online recipes, and add line spacing on our print recipes. Using bullets takes up space, but there doesn’t seem to be a usability impact with bullet lists.&lt;/p&gt;
&lt;h2&gt;Ingredient order&lt;/h2&gt;
&lt;p&gt;This seems like it would be easier than it is, but the order of ingredients matters. In cooking, ingredients are often listed in the order in which they are used, but in most beverage recipes, that’s not much of a concern. Often a cocktail recipe is a list of ingredients that all get mixed up at once. Sure, if the order in which ingredients are used matters, such as “in a mixing glass muddle the mint,” then those ingredients do come first, but, for the rest? It comes down to preference. Some like to list ingredients by type, i.e. base spirit, then any liqueurs, then any juice, then any sweeteners, and finally any finishing items such as bitters. Others, including The Portland Pour, like to list ingredients by descending quantity, 2 oz of this, then 1 oz of that, then 1/2 oz of the other thing. In cases where quantities are similar, we place the ingredient most often used in quantities greater than the other one(s) first.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1/2 oz Lemon juice&lt;/li&gt;
&lt;li&gt;1/2 oz Simple syrup&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The exception to the descending quantities rule is base spirit. If there’s more juice than vodka, such as in a Harvey Wallbanger, the base spirit comes first, then all the rest of the ingredients in descending quantity. This makes it easier to glance at the ingredients and know what type of drink it is. Is it a vodka drink, or a whiskey drink, or a soft drink, etc.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1 oz Vodka&lt;/li&gt;
&lt;li&gt;4 oz Orange juice&lt;/li&gt;
&lt;li&gt;1/2 oz Galliano L’autentico&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If there is an ingredient that must be used before the others, it comes first, before the base spirit, such as in a Southside, which requires the maker to first muddle some mint.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;4–5 Mint leaves&lt;/li&gt;
&lt;li&gt;2 oz Aria Gin&lt;/li&gt;
&lt;li&gt;3/4 oz Lemon juice&lt;/li&gt;
&lt;li&gt;1/2 oz Simple syrup&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If there are many similar quantities, such as in an equal parts cocktail, or others with lots of the same measures, we follow the base spirit, liqueur, mixers, modifiers, finishers pattern. Here’s an example of a recipe, Fish House Punch, with lots of similar quantities. Notice how there are 2 base spirits, rum and brandy, each the same amount, so, alphabetical order is used for them, then comes a liqueur, and lemon juice, then the rest.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;3/4 oz First City Rum&lt;/li&gt;
&lt;li&gt;3/4 oz Treos Brandy&lt;/li&gt;
&lt;li&gt;3/4 oz Giffard Crème de Pêche de vigne&lt;/li&gt;
&lt;li&gt;3/4 oz Lemon juice&lt;/li&gt;
&lt;li&gt;1/4 oz Cane sugar syrup&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Topping and finishing items always come at the end of the list, because they’ll be used last, but they might not always have a quantity, such as in a recipe for a French 75, which calls for mixing the first three ingredients, then topping with sparkling wine, how much of which you use depends on the size of the glass in which the drink is served.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1 1/2 oz Aria Gin&lt;/li&gt;
&lt;li&gt;3/4 oz Lemon juice&lt;/li&gt;
&lt;li&gt;1/4 oz Simple syrup&lt;/li&gt;
&lt;li&gt;Sparkling wine&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;What about garnish? Most cocktails involve a garnish, which may, or may not be included on the ingredient list. Often times garnish is a suggested item, and the maker or bartender will embellish as they see fit, except in cases like a Gibson where the garnish defines the drink. In that case it’s not uncommon to see multiple suggestions, such as on Old Fashioned which can be garnished with an orange peel, or an orange wedge and cherry, or however you like to adorn your glass.&lt;/p&gt;
&lt;p&gt;Common garnishes, such as lemon twist, orange peel, olives, cocktail onions, cherries, etc. are not included in the ingredient list because they are typically on hand behind a bar, or in an enthusiast’s kitchen, but if the garnish requires preparation, it is included last in the list.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;3 Figs&lt;/li&gt;
&lt;li&gt;6–8 Basil leaves&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;How to prepare the garnish is then included in the recipe instructions. If the garnish is something that typically wouldn’t be on hand in a kitchen or behind a bar and might require a shopping trip, it’s included last in the ingredient list with a notation.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;2 Kafir lime leaves for garnish&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Instructions&lt;/h2&gt;
&lt;p&gt;In our survey, instructions are all over the place, sometimes literally. Some were placed on the page too far from the ingredient list. Some were place close enough, but next to the ingredient list. Some came in 2 columns. We found vertical, one column, after the ingredient list (also a single column) was easiest to use.&lt;/p&gt;
&lt;p&gt;Writing style also varies across recipes. Some are very direct and clear, and others are so verbose, with so much information that they are very difficult to use. Short, simple sentences or phrases are best.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.sanity.io/images/5pnyimif/production/e16fd49a79c66ff118a66adcce235c1df3ecfb9b-594x723.png?w=600&quot; alt=&quot;undefined&quot;&gt;&lt;/p&gt;
&lt;p&gt;The AP guidebook agrees. It further specifies that all instructions should begin with equipment, not ingredient.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;**Yes: **In a saucepan, heat the sugar and the water.&lt;/li&gt;
&lt;li&gt;**No: **Heat the sugar and the water in a saucepan.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Where the tool matters, we follow the advice, as in the above example, but we do find beverage recipes are more conducive to verb first instructions.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Muddle the mint&lt;/li&gt;
&lt;li&gt;Swizzle with pebble ice&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Instructions should contain all the necessary information to perform the step, and nothing more, or less.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;**Yes: **In a saucepan, heat the sugar and the water.&lt;/li&gt;
&lt;li&gt;**No: **In a medium sized saucepan, non-stick or stainless, add the sugar, then add the water, then place the saucepan on the stove and apply heat.&lt;/li&gt;
&lt;li&gt;**No: **Mix the sugar and the water&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Some instructions use paragraphs to organize their steps, as in one paragraph might contain a few steps. This works for things like baking a cake, where you often mix the dry ingredients together, then the wet ingredients, then both, but for beverages, that’s rarely the case, so we use one instruction per paragraph, which is often just a short sentence or phrase.&lt;/p&gt;
&lt;p&gt;We found the shorter the instruction, the better it can be followed. Beverage recipes often have their own shorthand, and equipment can be personal preference, so we adjusted our rules to specify action and result. Instructional shorthand works for beverages, although some specification of tools is acceptable.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Stir with ice.&lt;/li&gt;
&lt;li&gt;To a mixing glass, add the ingredients, with ice, and stir.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A food recipe might simply say something like, “saute the onions until translucent.” Drink recipes, for us, are similar to that. To simply say “stir with ice,” or “stir with ice until chilled,” is very similar. It assumes the maker understands how to saute onions, or how to stir. The method can vary. Some practitioners like to stir in one way, with one kind of ice, others like to work differently, and the recipe instructions cannot say exactly how long it will take to stir and achieve proper results. But the instructions can assume that the maker understands what the instruction is communicating. We tried a number of instructions, and settled on a shorthand that communicates, but is very terse.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Shake with ice and serve up.&lt;/li&gt;
&lt;li&gt;Garnish with a lemon twist.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It’s compact and clean, but, occassionally there are more steps&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In a shaker, muddle the mint&lt;/li&gt;
&lt;li&gt;Add the remaining ingredients, and shake with ice.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Notice how, in some cases, serving instructions are included in an instruction, and in some cases are their own instruction. Up or on the rocks is fairly well understood, but, if there is a specific serving glass, for example, it must be called out in the instruction, and always begin with a verb, such as serve, or top, or garnish, etc.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Serve up.&lt;/li&gt;
&lt;li&gt;Serve up in a coupe.&lt;/li&gt;
&lt;li&gt;Top with sparkling wine.&lt;/li&gt;
&lt;li&gt;Garnish with a sprig of mint.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In the end, there aren’t really that many instructions required to make a cocktail, even complicated ones. However, there may be ingredients that must be dealt with before the drink is made. Remember that cake? With the dry ingredients first, then the wet, then mix them all together? We don’t do that. If there is an ingredient that is specific to the recipe, or not one of the standard pre-made things (simple syrup, honey syrup, fresh juice, etc.) we add the recipe for that thing before the recipe for the thing it’s in. The Clover Club is one such cocktail that calls for raspberry syrup. When we post a recipe for it, we post the recipe for the raspberry syrup first, then the recipe for the Clover Club. In that way, you could take the syrup recipe and make the syrup for lots of other things you might like to try, without having to parse it from the post’s parent recipe.&lt;/p&gt;
&lt;h2&gt;Additional information&lt;/h2&gt;
&lt;p&gt;Far too many of our samples offer way too much additional information in the instructions, making them hard to use. All of this information can be in a recipe description. If there is additional information, which could be notes on ingredients, tips for technique, a bit of history, or some cultural context, it’s best placed in some notes or an essay before the ingredient list. Any post on The Portland Pour follows this format, a title, a picture, an essay, an ingredient list, and instructions.&lt;/p&gt;
&lt;h2&gt;Servings&lt;/h2&gt;
&lt;p&gt;Many recipes specify how many servings it will make. This is totally useful information because no one needs to make a big pot of something only to find out it will feed 8, and they’re only cooking for 2. For cocktails, however, we can assume that they are single serving, so we don’t specify servings unless it’s more than one, such as in a recipe for punch, or when it’s not practical to make just one, such as our recipe for Spiced Apple Cider, which is a recipe for 2 servings. In that case, servings are specified immediately preceding the ingredient list.&lt;/p&gt;
&lt;h2&gt;Time (prep, cook, and total)&lt;/h2&gt;
&lt;p&gt;Timing on a recipe is crucial if you need to know how long to cook something. Not much of that happens in beverages, but where it does, call out time in the instructions.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Lower the heat, and simmer for 4 minutes&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As for prep times, they can also be super helpful in food recipes, but we find it unnecessary information. The time it takes to mix a drink doesn’t really vary that much, and the steps are pretty standard. If the drink we’re presenting is a project that doesn’t have to be one, such as a recipe that requires and infused vodka, and you have to infuse the vodka yourself, well, that prep time can be a week or more. Best to just mention it in the description, and leave the core recipe strictly about measurement and assembly.&lt;/p&gt;
&lt;h2&gt;Putting it all together&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.sanity.io/images/5pnyimif/production/295ea356e895f8a6887d1e7bde9ffc39d76f863c-1400x933.jpg?w=600&quot; alt=&quot;undefined&quot;&gt;&lt;/p&gt;
&lt;p&gt;In the end, we wanted something consistent for our upcoming recipe cards. We feature a picture of the cocktail as we envision it on the left, and the recipe on the right. At the top we add a color band for base spirit, so one can flip through them in a recipe box and see what each recipe is more or less about. On the back, we left a place for notes, in case anyone using the card has some personal preference, or additions, or any comments they’ve added to our information.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Overall, recipes can be very simple or very complex. Beverage recipes, our concern, are usually simple, but can seem complex in many ways. As with all things UX, a little attention to detail, and consistency of presentation goes a long way to making a recipe easy to use. Even if it’s on your phone, sitting across the counter as you measure and pour, it can be easy to use if you think about what it takes to make it useful at a glance.&lt;/p&gt;
</content>
  </entry>
</feed>
